
// 向文档中添加数据
void DocumentWriter::addData(const char* str, int len, bool flush)
    if (len == -1)
        len = strlen(str);

    DocumentParser* parser = m_frame->document()->parser();
    if (parser)
        parser->appendBytes(this, str, len, flush);
            |
            V
void DecodedDataDocumentParser::appendBytes(
        DocumentWriter* writer , const char* data, 
        int length, bool shouldFlush)

    // 创建decoder
    TextResourceDecoder* decoder = writer->createDecoderIfNeeded(); {
                |
                V
        TextResourceDecoder* DocumentWriter::createDecoderIfNeeded()
            if (!m_decoder) // 还没有创建解码器
                    m_decoder = TextResourceDecoder::create(m_mimeType,
                            settings->defaultTextEncodingName(),
                            settings->usesEncodingDetector());

                    m_decoder->setEncoding(m_encoding,
                            m_encodingWasChosenByUser ?
                            TextResourceDecoder::UserChosenEncoding :
                            TextResourceDecoder::EncodingFromHTTPHeader);

            m_frame->document()->setDecoder(m_decoder.get());
    }

    String decoded = decoder->decode(data, length); {
            |
            V
        String TextResourceDecoder::decode(const char* data, size_t len)
            if (!m_checkedForBOM)
                lengthOfBOM = checkForBOM(data, len);

            bool movedDataToBuffer = false;

            // 如果文件类型是css, 而且还没有进行css charset检测
            if (m_contentType == CSS && !m_checkedForCSSCharset)
                if (!checkForCSSCharset(data, len, movedDataToBuffer))
                    // 如果没有进行css charset检测， 就推迟到下一次进行
                    // 注意这一次已经将data拷贝到m_buffer中了
                    return "";

            // 如果文件类型是html, xml, 而且还没有进行charset检测
            if ((m_contentType == HTML || m_contentType == XML) && 
                    !m_checkedForHeadCharset) 
                if (!checkForHeadCharset(data, len, movedDataToBuffer))
                    // 如果没有进行charset检测， 就推迟到下一次进行
                    // 注意这一次已经将data拷贝到m_buffer中了
                    return "";

            if (shouldAutoDetect()) {
                if (m_encoding.isJapanese()) {
                    detectJapaneseEncoding(data, len); 
                else 
                    TextEncoding detectedEncoding;
                    if (detectTextEncoding(data, len, m_hintEncoding, 
                                &detectedEncoding))
                        setEncoding(detectedEncoding, AutoDetectedEncoding);

            // 创建codec
            if (!m_codec)
                m_codec = newTextCodec(m_encoding);

            // 返回解码后的文字
            if (m_buffer.isEmpty())
                return m_codec->decode(data + lengthOfBOM, len - lengthOfBOM, 
                    false, m_contentType == XML, m_sawError);


            String result = m_codec->decode(m_buffer.data() + lengthOfBOM, 
                    m_buffer.size() - lengthOfBOM, false, 
                    m_contentType == XML && !m_useLenientXMLDecoding, m_sawError);
            m_buffer.clear();
    }
    if (shouldFlush)
        decoded += decoder->flush();

    if (decoded.isEmpty())
        return;

    writer->reportDataReceived();

    append(decoded);

