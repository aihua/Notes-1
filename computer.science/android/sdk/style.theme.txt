file:///home/jiangrui/android/android-sdk/docs/guide/topics/resources/style-resource.html

Style Resource
    可以为View(在layout xml)定义
        !!! 为ViewGroup的style不会被子View继承

    可以为Activity, Application(AndroidManifest.xml)定义
        Activity/Application中的每个View都会应用这个style (对于view支持的属性)

Style {
    UI显示属性的集合

    For example, by using a style, you can take this layout XML:
    <TextView
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:textColor="#00FF00"
        android:typeface="monospace"
        android:text="@string/hello" />
                |
                |
                V
    <TextView
        style="@style/CodeFont"
        android:text="@string/hello" />

    XML file for the style (saved in res/values/):
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <style name="CodeFont">
                <item name="android:textColor">#00FF00</item>
                <item name="android:typeface">"monospace"</item>
            </style>
        </resources>


    // !!! view中显示定义的android:textColor会覆盖style中的color
    // !!! 如果是继承于一个parent style， parent中的相同style会被子style中的item覆盖


    <!-- 继承系统的style -->
    <style name="GreenText" parent="@android:style/TextAppearance">
        <item name="android:textColor">#00FF00</item>
    </style>

    <!-- 继承自己定义的的style -->
    <style name="CodeFont.Red">
        <item name="android:textColor">#FF0000</item>
    </style>

    <!-- 继承自己定义的的style -->
    <style name="CodeFont.Red.Big">
        <item name="android:textSize">30sp</item>
    </style>

    有一些style是专门为Activity和Application定义的, 不能够应用到View
        如windowNotitle, windowBackground

    如果为View定义了它不支持的style， View会忽略这些style

    可以参考 R.attr,来获取所有style属性
}

Theme {
    应用到整个Activity或Application的Style

    Select a theme based on platform version
        res/values/styles.xml # 最小的sdk版本
        res/values-v11/styles.xml # 3.0以上的sdk版本

}

定义style:
file location:
    res/values/filename.xml
        文件名是任意的

使用style:
resource reference:
    In XML: @[package:]style/style_name

语法：
<resources>
    <style name="style_name" parent="@[package:]style/style_to_inherit">
        <item name="[package:]style_property_name">style_value</item>
    </style>
</resources>

<style>
    Defines a single style. Contains <item> elements.

    attributes:
        name
            String. Required. A name for the style, which is used as the resource ID to 
                apply the style to a View, Activity, or application.
        parent
            Style resource. Reference to a style from which this style should inherit style properties.

    <item>
        Defines a single property for the style. Must be a child of a <style> element.
        attributes:
            name
                Attribute resource. Required. The name of the style property to be defined, 
                with a package prefix if necessary (for example android:textColor).


系统默认theme
    base/core/res/res/values/themes.xml 

    <!-- 默认的theme --> 
    <style name="Theme">
        ...
        <item name="android:windowNoTitle">false</item>
        <item name="android:windowFullscreen">false</item>
        <item name="android:windowContentOverlay">@null</item>
        ...
    </style>

    <!-- Variant of the default (dark) theme with no title bar -->
    <!-- 覆盖了Theme中的windowNoTitle属性 -->
    <style name="Theme.NoTitleBar">
        <item name="android:windowNoTitle">true</item>
    </style>


    <!-- 覆盖了Theme.NoTitleBar中的windowNoTitle属性 -->
    <style name="Theme.NoTitleBar.Fullscreen">
        <item name="android:windowFullscreen">true</item>
        <item name="android:windowContentOverlay">@null</item>
    </style>

    如果需要定制手机整个的style, google建议修改下面文件：
        base/core/res/res/values/themes_device_defaults.xml


例如：
    1. base/core/res/res/values/themes.xml 中定义了
    <style name="Theme">
        <item name="colorForeground">@android:color/bright_foreground_dark</item>
        ...
    </style>

    2. 在应用程序的AndroidManifest.xml中
    <activity
        android:label="@string/app_name"
        android:name=".TempCustomTitleActivity" 
        android:theme="@android:style/Theme" >

XML file for the style (saved in res/values/):
    <?xml version="1.0" encoding="utf-8"?>
    <resources>
        <style name="CustomText" parent="@style/Text">
            <item name="android:textSize">20sp</item>
            <item name="android:textColor">#008</item>
        </style>
    </resources>

XML file that applies the style to a TextView (saved in res/layout/):
    <?xml version="1.0" encoding="utf-8"?>
    <EditText
        style="@style/CustomText"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="Hello, World!" />

