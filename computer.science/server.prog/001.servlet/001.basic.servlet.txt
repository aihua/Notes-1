
处理http请求的基本流程：
    容器
        创建一个HttpServletRequest和一个HttpServletResponse 
        创建一个线程
        找到对应servlet
        调用servlet service()方法
            -> doGet
                生成html,并将html放到响应中
            -> doPost

        线程结束
        容器将HttpServletResponse转化为一个http response
        容器将http response返回给客户


xml基本配置 (DD, 部署描述文件)

    建立servlet名字和类的关系
    <servlet> 
        <servlet-name>Hello Servlet</servlet-name>
        <servlet-class>com.springapp.mvc.HelloServlet</servlet-class>
    </servlet>

    建立servlet名字和url的关系
    <servlet-mapping>
        <servlet-name>Hello Servlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>


serlet的状态:

            -------init()---->
    不存在                      完成初始化 (loop: service())
            <------destroy()---
    
javax.servlet.Servlet
    public void init(ServletConfig config) throws ServletException;
        可以覆盖该方法， 如得到一个数据库连接，或者向其他对象注册

        不要在servlet的构造函数中做任何事情
        将初始化的动作放到init函数中

    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException;
    public void destroy();
                
       init() 是在一个单独的线程中运行

       每一个http request都是在一个新的服务线程中运行的 (或是后台有一个线程池)
            容器会为每个请求分配一个request和response
        
       一般一个servlet类都只会有一个对象， 除非在SingleThreadModel

    ServletConfig对象
        一个Servlet对应一个ServletConfig对象

        主要作用是提供初始化时的参数
        提供ServletContext
        包括了servlet名字

    ServletContext对象
        每个web应用对应一个java虚拟机
        每个web应用对应一个ServletContext (or AppContext)
            应用中的所有servlet共享一个ServletContext

        提供context初始化时的参数
        提供一些web应用中公共的属性

        用于获取web应用中的资源

        获取log函数

Listener
    ServletContextListener

        监听ServletContext的初始化和销毁 (也就是应用启动或者停止的时候)
            ServletContext初始化时可以创建数据库，连接到数据库，等等
            ServletContext销毁时，可以关闭数据库连接，等等
    
    ServletContextAttributeListener
        ServletContext中属性的变化， 增加，删除，修改

    HttpSessionListener
        应用中有多少并发的用户 (session)

    ServletRequestListener
        跟踪每一次request

    ServletRequestAttributeListener
        Request中属性的变化，增加，删除，修改

    HttpSessionBindingListener
        Causes an object to be notified when it is bound to or unbound from a session

    HttpSessionAttributeListener
        This listener interface can be implemented in order to
        get notifications of changes to the attribute lists of sessions within
        this web application.
                        
    HttpSessionActivationListener
        Objects that are bound to a session may listen to container
        events notifying them that sessions will be passivated and that
        session will be activated. A container that migrates session between VMs
        or persists sessions is required to notify all attributes bound to sessions
        implementing HttpSessionActivationListener.

属性
    一个name和value的配对

    可绑定到三个servlet API对象中
        1. ServletContext
            全局属性
            应用中的每个成员 servlet, jsp, context listener都能够访问

            不是线程安全的

            可以在访问上下文属性的时候，为ServletContext进行同步

        2. ServletRequest / HttpServletRequest
            能够访问特定的ServletRequest的部分， 特定的servlet, jsp可以访问

            线程安全的

        3. HttpSession
            能够访问特定的HttpSession的部分， 特定的servlet, jsp可以访问

            不是线程安全的

            比如一个浏览器可以开起多个窗口，同时访问一个url
                只要http请求的session id是一样的，服务器就会认为这是同一个session

            必须对HttpSession进行同步 

    
     在servlet的处理函数，最好不要使用实例变量
        使用属性来代替实例变量

    使用场景：
        1. 请求分派 forward
            将变量保存在请求的属性中


