concept:
    index
    repository
    branch
    commit

get help
    git help add
    git help log

Importing a new project
    tar xzf project.tar.gz
    cd project
    git init

    After git add, this snapshot is now stored in a temporary staging area which git calls the "index".
    git add .

    You can permanently store the contents of the index in the repository with git commit
    git commit

Making changes
    Modify some files, then add their updated contents to the index:
    git add file1 file2 file3

    better check the changes before committing
    git diff --cached
    git diff 

    get a brief summary of the situation 
    git status

    Finally, commit your changes with
    git commit

    automatically notice any modified (but not new) files, 
    add them to the index, 
    and commit, all in one step.
    git commit -a

Git tracks content not files
    git add is used both for new and newly modified files

    in both cases it takes a snapshot of the given files and stages that content in the index, 
    ready for inclusion in the next commit.


Viewing project history
    git log         view the history
    git log -p      view the complete diffs


Managing branches
    A single git repository can maintain multiple branches of development
    git branch experimental

    git branch list all existing branches

        experimental
        * master    // current branch

    merge two branches
        git checkout experimental
        (edit file)
        git commit -a

        git checkout master
        (edit file)
        git commit -a

        at this point the two branches have diverged, with different changes made in each.
        To merge the changes made in experimental into master, run
        git merge experimental
            If the changes don’t conflict, you’re done.
            If there are conflicts, markers will be left in the problematic files showing the conflict

        Once you’ve edited the files to resolve the conflicts,
        git commit -a


    graphical representation of the resulting history
    gitk

    delete the branch
    git branch -d experimental
    or
    git branch -D experimental
        -d Delete a branch. The branch must be fully merged in HEAD.
        -D Delete a branch irrespective of its merged status.


    Branches are cheap and easy, so this is a good way to try something out.

Using git for collaboration
    Alice has a git repository in /home/alice/project
    Bob, who has a home directory on the same machine, wants to contribute

    Bob
        creates a new directory "myrepo" containing a clone of Alice’s repository
            bob$ git clone /home/alice/project myrepo

        makes some changes and commits them
            (edit files)
            bob$ git commit -a
            (repeat as necessary)

    Alice
        when Bob is ready, pull changes from the repository at /home/bob/myrepo
            alice commit all her changes
            alice$ cd /home/alice/project
            alice$ git pull /home/bob/myrepo master

            This merges the changes from Bob’s "master" branch into Alice’s current branch. 
            The "pull" command thus performs two operations: 
                it fetches changes from a remote branch, 
                then merges them into the current branch.

        peek at what Bob did without merging first
        inspect what Bob did
        alice$ git fetch /home/bob/myrepo master
        alice$ git log -p HEAD..FETCH_HEAD
        alice$ gitk HEAD..FETCH_HEAD
        gitk HEAD...FETCH_HEAD

        "HEAD..FETCH_HEAD" means
            show everything that is reachable from the FETCH_HEAD but exclude anything that is reachable from HEAD


        alice$ git remote add bob /home/bob/myrepo
        alice$ git fetch bob # not merge

        # what was fetched is stored in a remote-tracking branch
        alice$ git log -p master..bob/master
        alice$ git merge bob/master

        # This merge can also be done by pulling from her own remote-tracking branch, like this:
        alice$ git pull . remotes/bob/master


    Bob
        // merge alice's work
        bob$ git pull

        bob$ git config --get remote.origin.url

        /home/alice/project

Exploring history
    git log
    git show 4b7d5335e2ad2f058ce400937a28d6632b87ecf0

    You can use any initial part of the name
        $ git show 4b7d5335e2ad2f
        $ git show HEAD         # the tip of the current branch
        $ git show experimental # the tip of the "experimental" branch

    $ git show HEAD^  # to see the parent of HEAD
    $ git show HEAD^^ # to see the grandparent of HEAD
    $ git show HEAD~4 # to see the great-great grandparent of HEAD

    add alias for a commit
    $ git tag v2.5 1b2e1d63ff


    $ git diff v2.5 HEAD     # compare the current HEAD to v2.5
    $ git branch stable v2.5 # start a new branch named "stable" based
                             # at v2.5
    $ git reset --hard HEAD^ # reset your current branch and working
                          # directory to its state at HEAD^

    The git grep command can search for strings in any version of your project, so
    $ git grep "hello" v2.5
    $ git grep "hello"

    $ git log v2.5..v2.6            # commits between v2.5 and v2.6
    $ git log v2.5..                # commits since v2.5
    $ git log --since="2 weeks ago" # commits from the last 2 weeks
    $ git log v2.5.. Makefile       # commits since v2.5 which modify
                                    # Makefile

    $ gitk --since="2 weeks ago" drivers/

    $ git diff v2.5:Makefile HEAD:Makefile.in
    $ git show v2.5:Makefile

Next Steps
    The object database
        elegant system used to store the history of your project—files, directories, and commits

    The index file
        cache of the state of a directory tree, used to create commits, check out working directories, 
        and hold the various trees involved in a merge


