Documentation of Enabling and Generating Oprof Report
      	 
1.
Ensure that Android is built in eng mode. Oprofile does not work if Android is built in user mode.
In current 2231 configuration, Android is built in user mode for performance reasons.

    in scripts/build_ANDROID.sh:
        # MAKE_TARGETS="PRODUCT-$PROJECT_BUILD_TARGET-user droid imc_recovery dist"
        MAKE_TARGETS="PRODUCT-$PROJECT_BUILD_TARGET-eng droid imc_recovery dist"

    in scripts/build_FF.sh:
        #$PRJ_SCRIPT_DIR/build_native_ALL.sh xmm2231ff1_0 release
        $PRJ_SCRIPT_DIR/build_native_ALL.sh xmm2231ff1_0 debug

2.
Changes in the Linux Kernel’s config is required.
Do CONFIG_PROFILING, CONFIG_OPROFILE and CONFIG_HAVE_OPROFILE are set.
       CONFIG_PROFILING=y
       CONFIG_OPROFILE=y
       CONFIG_HAVE_OPROFILE=y
Config file path USER_Build_Space/linux/linux-2.6-virt/arch/arm/configs/xmm2231_native-trusted-full_virt-android_defconfig
(how about linux/linux-2.6-virt/arch/arm/configs/xmm2231-trusted-full_virt-android_defconfig?)

# Rebuild your Kernel by build_LINUX.sh.
# Rebuild your build_VLX.sh.

3.
Make a full build by 
    build_natvie_ALL.sh xmm2231ff1_0

4.
Please double check that changes made in Kernel’s config get effected in build directory (./build/linux-2.6-virt/build-LINUXKERNEL/.config) after building build_LINUX.sh.
If not, remove build directory (./build/linux-2.6-virt/build-LINUXKERNEL) and rebuild buil_LINUX.sh.
# Take only vmjaluna.fls to flash.

5.
Please make sure that adb is recognizing your target board.

6.
Copy the android symbols (android/out/target/product/xmm2231ff1_0/symbols/) and vmlinux into Linux machine of android/out/target/product/android/symbols/
    Now you can see these things in symbols Directory.
    init  sbin  system  vmlinux

android/debug/target/product/xmm2231ff1_0/symbols/

./images/debug/xmm2231ff1_0_2g/vmlinux
./build/debug/linux/linux-2.6-virt_2g/build-LINUXKERNEL/vmlinux


7.
In ubuntu, you need to install oprofile:
sudo apt-get install oprofile

8.
copy android/external/oprofile/opimport_pull to android/

9.
then modify the oprofile.sh by:
    #OPREPORT=${OPROFILE_EVENTS_DIR}/bin/opreport
    OPREPORT=/usr/bin/opreport

    #PATH=${HOST_BIN_DIR}:${PATH} OUT=${SYMBOLS} ${OPIMPORT_PULL} -r /tmp/oprofile.pull
    PATH=${HOST_BIN_DIR}:${PATH} OUT=${SYMBOLS} ./opimport_pull -r /tmp/oprofile.pull

10.
copy oprofile.sh to android/ and run it in the folder android/

11.
change to root:
sudo bash

Run these commands in Linux Machine (Use proper port in the target)
Run oprofile.sh with some arguments like.
       ./oprofile.sh -v  -d  20
   -v => verbose, -D =>  target device, -d=> duration

if you meet error:
/home/jiangrui/192.168.10.220_1666/xmm2231.2.15.oprofile/android/prebuilt/linux-x86/oprofile/../../linux-x86_64/oprofile/bin/opreport: error while loading shared libraries: libbfd-2.18.0.20080103.so: cannot open shared object file: No such file or directory

#Do NOT use android's opreport, just use ubuntu's
mv /home/jiangrui/192.168.10.220_1666/xmm2231.2.15.oprofile/android/prebuilt/linux-x86/oprofile/../../linux-x86_64/oprofile/bin/opreport /home/jiangrui/192.168.10.220_1666/xmm2231.2.15.oprofile/android/prebuilt/linux-x86/oprofile/../../linux-x86_64/oprofile/bin/opreport.bk

12.
Now you can see Raw Oprof results. If you want to Generate Report, 
    opreport -l --session-dir=/tmp/oprofile.pull/ -p  /home/jiangrui/192.168.10.220_1666/xmm2231.2.15.oprofile/android/out/target/product/android/symbols/
    opreport -l --session-dir=/tmp/oprofile.pull/ -p  /home/jiangrui/192.168.10.220_1666/xmm2231.2.22.oprofile/android/out/target/product/android/symbols/
    opreport -l --session-dir=/tmp/oprofile.pull/ -p  /home/jiangrui/192.168.10.220_1666/xmm2231.2.2_5.16/android/debug/target/product/android/symbols/

    You can generate Different type of report by passing different arg to opreport -help.



