
解析极限编程
Extreme Programming Explained


写测试用例的同时，也就是设计外部API的过程。
    需要考虑设计出好的API

设计原则：

    设计常量对象
        如一个Dollar对象，如果为其设定了值，那么经过各种操作后，其值应该还是不变的。

Best practice

    需要有一个todo list
        把几小时后需要完成的事情写在一张清单中
        不断的更新这个清单

        测试计划
        是否在代码中直接写todo就行呢？ 工具是否支持？

    最好的设计是让大部分代码都感觉不到货币的不同

TDD是一种逆向思维的产物
    如巴菲特的伙伴查理所说，“什么事情都要反过来想”

./c00.prolog.txt
Part One

./c01.money.example.txt
./c02.bad.object.txt
./c03.txt

./c05.clone.and.abstract.txt
./c08.hide.concrete.obj.txt
./c09.refactory.txt
./c10.more.refc.txt
./c11.delete.empty.class.txt

在一个地方使用强制转换快速实现代码，一旦测试通过，就把代码移动到应该位置
为了消除显示的类判定(instance of)，引入了多态。

将汇率转换的机制抽取出来，形成一个Bank类
比喻的效果

将加法机制抽取出来，形成一个Sum类 
将Money, Sum都一般化为Expression
在测试用例中，从叶子到根实施一般化

如果对于java的语法有疑问，写测试用例进行验证。
对于一些简单的帮助类，可以不用写测试程序。

运行自动静态检查工具。

如果预期测试无法通过，但是却意外通过了，那么需要分析原因。
有些用例的确无法通过，那么就需要将其记录下来，作为系统的限制，或以后需要完成的工作。

最后，回顾设计。词语和概念是否相同，是否存在难以去除的重复设计?

消除代码和测试之间的重复设计。

./c20.test.principle.txt

