将压力转化为平日的琐事
    越是感到紧张，越是多地运行测试
    测试给人一种状态良好的感觉，并且减少出错的次数，从而继续减少压力

尽早，尽快运行测试
    如何做到没有bug?
    在别人发现bug之前，自己先发现bug并fix它。

相互独立的测试
    测试之间的功能性应该是相互独立的。
        努力使软件达到“高内聚，低耦合”的目标

    运行测试次序的先后是独立的
    
TODO List:
    开始测试之前，写一个测试清单。
        将接下来几个小时内的工作都写到一张纸上
            不断的更新这张纸

        推进工作之前，计划好这一轮测试需要完成的工作。

        计划是流水线的基础

        当出现一个与当前process不相关的idea时，将其添加到todo list中
            确保它不会被遗忘后，回到当前的process中去

    保守登山家的规则：
        登山时， 无论什么时候，四肢中必须有三个附在山上

    进行TDD时，无法通过的测试只能有一个

如何从Todo list选择测试：
    选择那个具有指导意义，而且你有把握快速实现的测试

    不要选择太容易或太困难的， 从两者之间选择
        去掉一个最高分，去掉一个最低分

启动测试
    从测试某个实际上不做任何工作的操作开始

    对于新的操作，第一个问题是”这个操作隶属于那个类？“

    问题：
        Polygon Reducer: 
            输入是一组多边形组成的网格， 输出也是一组多边形组成的网格。输出能够精确地覆盖输入。
            但是输出使用尽可能少的多边形

            测试之前是否需要阅读论文

        启动测试：
            输入和输出应该一样，比如输入一组无法精简的多边形
            输入应该经可能的少，如一个多边形，甚至是一个空的多边形列表

            第一个测试
            Reducer r = new Reducer(new Polygon());
            assertEquals(0, r.result().npoints);

    根据开发程序的难度来完成启动测试
        难度大，没有经验的项目
            启动测试使用一步测试

        难度小，有经验的项目
            启动测试使用有一两步操作的测试

测试优先：
    在编写被测代码之前编写测试代码
    
断言优先:
    从哪儿开始构建系统？
        从对最终系统的描述开始

    从哪儿开始编写一项功能？
        从最希望代码能够通过的测试开始

    从哪儿开始编写一个测试？
        从测试完成时能够通过的断言开始
    
        强大的简化效果

        最开始需要回答的问题：
            1. 什么是正确的结果
            2. 怎么去检查结果的正确性

测试数据:
    使用容易让人理解的数据
        
    不要使用同一个常量表达多个意思
        如测试加法，可以尝试1+1。如果顺序颠倒了，结果会如何
        第一个参数可以是1, 第二个参数应该不是1了，如2


    使用真实数据

使数据直观化

    让人能够直接从代码中清晰地看出测试的意图
        如100 FRC转化为50 USD 中间需要收1.5%的手续费

        // 一般写法
        assert(new Money(49.25, "USD"), result);

        // 直观的写法
        assert(new Money(100 / 2 * (1-0.015), "USD"), result);
    
说明测试
    利用测试提供说明

    不要强迫其他人改变他的工作方式

    使用测试用例向其他工程师说明自己的想法

学习测试
    什么时候使用学习测试？
        第一次使用某个包中的一项功能时

        对于未知的新的API，不应该直接使用
            应该写一个测试程序，验证它是否满足我们的期望

回归测试
    发现一个bug后，需要为这个bug添加一个测试程序。
        以后每次回归都要保证所有测试都通过


休息一下
    如果感觉累了，休息一下
    喝一杯，散散步，打个盹

    如果没有思路，休息一下

    如果知道怎么实现，实现它。否则做一个伪实现或workaround。等到有思路的时候再去完成真正的实现。

重新开始
    迷失方向时， 扔掉原来的代码，重新开始

    迷失方向了，也休息过了，仍然摸不到方向
    

便宜的桌子，舒适的椅子
    坐得不舒服的话，是编写不出好的程序的







