请严格遵守一下流程：

测试计划
    设计todo list
    设计测试用例

    需要有一个todo list
        把几小时后需要完成的事情写在一张清单中
        不断的更新这个清单

        是否在代码中直接写todo就行呢？ 工具是否支持？
            可以尝试
                直接写todo
                将todo写在另外的文本文件中

    TODO List:
        开始测试之前，写一个测试清单。
            将接下来几个小时内的工作都写到一张纸上
                不断的更新这张纸

            推进工作之前，计划好这一轮测试需要完成的工作。

            计划是流水线的基础

            当出现一个与当前process不相关的idea时，将其添加到todo list中
                确保它不会被遗忘后，回到当前的process中去

        保守登山家的规则：
            登山时， 无论什么时候，四肢中必须有三个附在山上

        进行TDD时，无法通过的测试只能有一个

    如何从Todo list选择测试：
        选择那个具有指导意义，而且你有把握快速实现的测试

        不要选择太容易或太困难的， 从两者之间选择
            去掉一个最高分，去掉一个最低分


基本流程：
    1. 写一个不能工作的测试程序，这个程序甚至不能通过
    2. 尽快让这个程序通过工作，可以考虑使用简单粗暴的方法
    3. 重构，消除步骤2中所产生的重复设计，优化设计结构

    不可运行->可运行->重构

    流程细化：
    1. 写一个测试程序。写一个故事，设想你是客户程序员，你希望拥有什么接口。故事中包括任何你想到的，计算出的正确结果。
    2. 让测试程序能够运行。尽快让测试程序工作是压倒一切的工作。
        如果有一个整洁，简单的解决方案，那么就实现它。

        如果这个方案需要耗费多余1分钟（Jiang Rui: 太少了吧, 3分钟），就将其记下来，再回到主要问题上。
        怎么能够让测试用例能够在几秒钟内（Jiangrui: 30秒吧）通过

        快速通过测试是一切行为的的理由

    3. 编写合格的代码。去除步骤2中简单粗暴的方法。回归正统的设计之路。
        重构，消除重复设计，使测试尽快通过

        clean code that works

        首先可用，然后简洁

        快速通过测试的策略
            1. 伪实现，返回一个常量，并逐渐使用变量替换常量。
            2. 真实实现
            交替使用策略1, 2

        将一种感觉（如对副作用的厌恶，bug的恐惧感）转化为测试程序。

Integration Process:
    提交代码前，运行所有test case
    运行自动静态检查工具。
