2011-09-26 to 43 2.3 体系结构

第一章 入门

模型
    对现实的简化
    提供了系统蓝图
    从高层次考虑的系统的总体设计
    可包括详细的计划

    为什么需要建模
        更好地理解正在开发的系统
        不能完全理解一个复杂的系统
        清晰的模型有利于交流

    4个目的
        可视化
        规约系统的结构或行为
        给出了指导系统构造的模板
        对作出的决策进行文档化

建模原理:
    1. 选择要创建的模型
        如何选择将要创建的系统合适的模型

    2. 在不同层次和粒度上表示模型
        如从用户角度，从老板角度，从测试人员角度，从设计师角度，从程序员角度, 
        分析人员考虑做什么，开发人员考虑如何做。 这些人员需要从不同的角度和粒度对系统进行可视化

    3. 最好的模型是和现实相关联的
        建模需要不能忽视重要的细节

    4. 使用多个独立的模型，从多角度为系统建模

第二章 UML介绍

Unified Modeling Language
    功能： 
        可视化
        详细描述
        构造
            正向工程：从uml生成c++, java代码
            逆向工程：从c++, java生成代uml码
        文档化
            需求，体系结构，设计 

2.2 UML 模型概念
    2.2.1 UML的构造块
        事物
            结构事物(structural thing)
                名词，静态部分，描述概念或物理元素。重称为classifier
                    class
                    interface
                    collaboration, 协作
                    use case
                        对一组动作序列的描述
                    主动类
                        对象拥有一个进程或线程
                    构件(component)
                        模块化部件
                        将实现隐藏在一组接口后
                        接口相同的构件可以互相替换
                    制品(artifact)
                        系统中物理的可替代部件，如
                            源代码
                            脚本
                            可执行程序
                            动态库
                    节点
                        运行时存在的物理元素,表示一个计算机资源。如
                            server
                        一个构件可在一个节点中，也可从一个节点迁移到另一个节点

            行为事物(behavioral thing)
                动词, 交互和行为
                    交互（interaction）
                        由消息构成
                    状态机(state machine)
                    活动（activity）

            分组事物(grouping thing)
                包(package)
                    纯粹是概念上的东西，仅仅在开发的时候存在
                    结构事物，行为事物，其他分组事务都可以放到包中

            注释事物(annotational thing)

        关系
            依赖
                ---->
            关联
                ____
            泛化
                ______|>
            实现
                ------|>
        图
            类图
            对象图
            构件图
            组合结构图
            用例图
            顺序图
            通信图
            状态图
            活动图
            部署图
            包图
            定时图
            交互概览图

2.2.3 共用机制
    1. 详细描述
        文字描述
    2. 修饰
        类中方法公有私有
    3. 通用划分
        类和对象的划分，既图形符号上的区别
        接口和实现的分离
        类型和角色分离
    4. 扩展机制
        stereotyp
            创建新的构造块
        标记值 (tagged value)
        约束 (constraint)

2.3 体系结构
    什么是体系结构
        整体的组成
        各个部分之间的接口
        各部分的协作行为
        性能，弹性，复用，可理解性            

    体系结构的表示: 5个视图
        1. 用例视图 (use case view)
            描述系统行为

            静态方面
                用例图
            动态方面
                交互图，状态图， 活动图

        2. 设计视图 (design view)
            类，接口和实现
            系统的功能需求

            静态
                类图，对象图
            动态方面
                交互图，状态图， 活动图

        3. 交互式图 (interaction view)
            不同部分之间的控制流，包括了并发和同步
            针对性能，可伸缩性和吞吐量

            静态
                类图，对象图
            动态方面
                交互图，状态图， 活动图

        4. 实现视图 (implementation view)
            发布的物理体和组件。如可执行文件， 动态库等等
            系统发布，配置管理

            静态
                构件图
            动态方面
                交互图，状态图， 活动图

        5. 部署视图 (deployment view)
            物理拓扑节点， 如server上需要配置什么服务, 数据库， client上需要配置哪些客户端等等。

            静态
                部署图
            动态方面
                交互图，状态图， 活动图

2.4 软件开发生命周期
    UML不依赖于软件开发过程

    不过适合UML的软件过程最好是:
        用例驱动的
            用例作为基本制品, 重视用例
        以体系结构为中心的
            体系结构作为基本制品
        迭代和增量的
            iterative process
            incremental process
                持续集成，每个发布都比上一个发布都有所改善

        风险驱动的

    生命周期的4个阶段
        初始
            萌发开发想法，...
        细化
            定义需求和体系结构
            为需求排序
            描述需求的功能

            分析和设计, HLD
        构造
            分析和设计, LLD
            写代码
        移交

3章 Hello, World



