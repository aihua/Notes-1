包的内聚性原则
    如何将类划分到包中

    包中的类从功能，逻辑上应该是内聚的

    前提：至少存在一些类，它们之间的关系已经确定了

    根据自底向下的观点对类进行划分

    1. 重用发布等价原则
        重用的粒度就是发布的粒度

        必须从重用者的角度考虑包的设计

        如果一个包中的软件是用来重用的，那么它就不能包括不是为了重用目的而设计的软件
        一个包中的软件要么都可以重用，要么都不能重用

    2. 共同重用原则
        逻辑功能密切相关的类，应该放到一个包中。
        一个包中所有类是不可分开的，仅仅依赖其中一部分是不可能的。

        如容器类和他的迭代器

        好处：减少包之间的依赖

    3. 共同封闭原则
        包中所有类对于同意性质的变化应该是共同封闭的
            一个变化对一个包产生影响，对其他包不会产生影响

        如果一个程序中的代码必须修改，则将需要修改的地方集中到一个类或包中
            而不是分散到多个地方

包的稳定性原则
    1. 在包的依赖关系中不允许存在环
       环的后果是一个包将依赖系统中所有的包 

        包的依赖关系应该尽量简单
            单元测试，发布


    消除包之间的依赖
        依赖倒置原则
        
        消除相互依赖
        Package A -----------------> Package B
        Package A <----------------- Package B
          class A  ----------------> class B
          class A  <---------------- class B
                        |
                        |
                        V
                 Package A                           Package B
  class A  ----------------> interface B  <|------------ class B
  class A  <-------------------------------------------- class B


    包的依赖关系和应用程序的功能没有直接的关系
    包是应用程序可构建的映射图

    2. 稳定依赖原则
        朝着稳定的方向进行依赖

        如果一个包预计是会发生变化的，那么不要让一个难以更改的包依赖他

        稳定性
            不容易被移动
                和被改变需要的工作量相关
                竖起来的硬币不是稳定的，而桌子是稳定的

            如果A被其他包依赖越多，A承担责任越多，A越稳定
                另外，A依赖的包越少，外部变化对他的影响越小，无依赖性， 其越稳定
                A <---------- B
                A <---------- C
                A <---------- D  A承担责任多，依赖少

            如果没有其他的包依赖D，D承担的责任越少，D越不稳定
                另外，D依赖的包越多，外部变化对他的影响越大，有依赖性， 其越不稳定
               D -------------> X
               D -------------> Y
               D -------------> Z


    理想的依赖模式：
        将可能经常发生变化的类放到不稳定的包中，
        稳定的包中放入不容易发生变化的类

        不稳定的包依赖于稳定的包

    稳定抽象原则
        一个稳定的包应该也是抽象的。 
            这样其稳定性可以被扩展。

            稳定的包应该包括一些抽象类


        一个不稳定的包应该是具体的
