第二章 极限编程概述

将客户作为团队成员
    客户：定义特性并按照优先级排列这些特性的人或团体

    最好的情况是客户和开发人员在一间屋子里工作
    距离越大，越难成为真正的团队

    拉近和客户之间的距离

user stories
    对于计划而言，了解需求只需要做到能够估算他的程度就行

    必须意识到存在很多细节
    必须知道细节的大致分类
    不必知道特定的细节
        特定细节会随着时间改变

    和客户反复讨论，获取对需求细节的理解，但不去捕获这些细节
    可在卡片上记录a few words, 并进行估算

    记录user stories

短交付周期
    每两周交付一次可工作的软件(称为一次迭代iteration)
    迭代结束时，要获取客户或测试人员的反馈

迭代计划
    由客户根据开发人员制定的预算(人手，时间)而选择一些user stories组成
    开发人员通过以前迭代中所完成的工作量来为本次迭代设定预算

    迭代开始后，客户就同意不再修改user stories和优先级
        其间，开发人员将user stories分解成task
        然后按照一定的顺序去开发这些task

发布计划
    一般6次迭代(3个月)会有一个发布
    表示一次较大的交付

    开发人员通过以前发布中所完成的工作量来为本次发布设定预算
    客户可指定user stories的实现顺序

    发布计划的内容和顺序是可以改变的

验收测试
    使用脚本，自动的反复的进行测试
    不断的添加测试用例
    每天多次运行测试用例集合

结对编程
{
    所有代码都是结对程序员通过同一台电脑共同完成

    一位程序员控制键盘，输入代码。另一个观察输入，并寻找代码中的错误和可以改进的地方

    两人频繁的交互角色, 一小时内可能互相交换了键盘好几次

    结对编程能够不但不会降低效率，而且会大大减少缺陷率
}

2.1.6 测试驱动的开发方法
    编写代码的目的都是是失败的单元测试能够通过。

    首先编写一个单元测试，由于它要测试的功能不存在，所以它会失败。

    然会编写代码使得测试通过

    编写测试用例和代码之间的更迭速度很快，基本上几分钟左右。
    测试用例和代码共同演化。

    测试用例循序渐进地对代码编写进行指导。

    ?? 是否形成流水线

2.1.7 集体所有权
    所有人对所有模块都可能参与。
    UI方面的专家可能被邀请去和别人结对从事中间件和数据库方面的任务。
    你需要学习新的领域知识，并不会限定在自己的专业领域内。

2.1.8 持续集成

2.1.9 可持续的开发速度
    马拉松, 而非100米短跑

2.1.10 开放的工作空间
    每个电脑前有两个椅子，墙上挂满了状态表，任务明细，UML图等
    每个人用对方能听到的声音相互讨论

2.1.11 计划游戏
    业务人员决定feature的重要性，开发人员决定feature所花费的代价

2.1.12 简单的设计
    简单, 直观
    重点放在本次迭代的范围内
    
    不会从基础结构开始
        可能不会先去开发中间件，或数据库
        最开始的工作是以最简单的方式实现第一批用户素材
        如果出现用户素材迫切需要基础结构时，才会引入该结构

    三条XP指导原则 mantras
        1. 考虑能够完成任务的最简单的方法
            如果能够使用平面文件，就不要考虑EJB 
            如果能够使用socket，就不要使用ORB
            如果能过不使用多线程，就不使用
        
        2. 慎重考虑选择基础结构
            如果有十分明显的现象，引入该结构更加合算，才引入这个结构

        3. 坚决消灭重复代码
            对重复的代码，重构成函数
            相似的算法，使用template method进行提炼

            使用抽象消除重复

2.1.13 重构 refactoring
    细小的改造，然后自动运行所有测试
        如此往复，周而复始

    可以在改造系统的同时，保持系统可以工作

    类似数学上的等效变换

    每隔一个小时，或者半个小时就要去做的事情

2.1.14 隐喻 metaphore
    考虑拼图游戏：
        从局部看，每个小块只要和相邻的其他块吻合就可。
        从全局看，是各个小块后面的背景图案起到了向导作用。
        图案是真正的向导。

    系统的全局视图, 就是隐喻。

    将系统中的部件比喻成生活中的直观的东西。


