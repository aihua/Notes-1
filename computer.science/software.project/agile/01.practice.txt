第一章 敏捷实践

敏捷宣言 {

个体和交互   >  过程和工具
    人件：
        人与人之间的交互是复杂的，... ，但却是工作中最为重要的方面

    原则，模式，实践都是重要的，但是发挥它们的是人

    过程和方法对于项目的结果的影响是次要的。首要的影响是人

    具有合作精神，自组织self-organizing的团队

    工具也是非常重要的
        挑选合适的编译器，IDE, 版本控制系统

可以工作的软件 >  面面俱到的文档
    编写一份系统原理和结构方面的文档
        短小
        主题突出
            高层结构和概括设计

    通过代码和近距离的沟通来进行培训

客户合作 > 合同谈判
    成功的项目需要有序的，频繁的客户反馈
    和客户紧密的工作在一起

响应变化 > 遵循计划
    计划不能够考虑的过远

    计划的策略:
        1. 为下两周做详细计划
            很清楚的知道下面两周的任务

        2. 为下三个月做粗略计划 
            粗略的知道后面三个月的事

        3. 在后面就做极为粗糙的计划
            有个模糊的想法就行了
}

敏捷原则
{
    优先要做的是通过尽早的，持续的交付有价值的软件来使用户满意
        初期交付的功能越少，最终交付的系统质量越高
        交付越频繁，最终交付的系统质量越高

    即使到了开发的后期，也欢迎需求改变
        利用变化来为用户创造竞争优势

        敏捷团队需要保持软件结构的灵活性

    经常性地交付可用的软件, 交付时间间隔从几个星期到几个月
        在项目开始的几周内，就交付一个具有基本功能的系统
            然后每两周交付一个功能渐进的系统

    这个项目开发期间，业务人员和开发人员必须天天都在一起工作
        心理学上的距离效应

    领导要为团队提供所需的环境和支持，并给与足够的信任
        人是项目成功的最重要的因素
            过程，环境，管理等等都被认为是次要的

        如果出现对人有负面影响的因素，就要对它们进行改进

    面对面的交谈是最有效的沟通方式

    工作的软件是首要的进度度量标准

    提倡可持续的开发速度
        能够保持一个长期的，恒定的开发速度

    优秀的技能和好的设计能够增强敏捷能力

    简单，是根本的

    最好的架构，需求和设计出自于“自组织”的团队
        任务是分配给整个团队，然后由团队决定完成任务的最好方法
        团队的每个成员都有对系统架构，需求，测试等等阶段的参与权利
        而不是分配任务给单独的个人

    在如何才能更有效的工作方面，团队需要定期反省，并相应调整行为
}

敏捷过程
{
    SCRUM, Crystal, 特征驱动软件开发(FDD)，自适应软件开发
    极限编程
}

