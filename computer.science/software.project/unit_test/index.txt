核心问题
    这段代码达到了我的期望吗？

正常情况
异常情况

输入:
    是否完备
    是否重复

    空的:
        指针，数组，对象
    边界:
        上边界，下边界

Junit Assert
    fail(String message);

Completeness, Repetition

测试哪些内容

    Right-BCEP

    Right:      结果是否正确
    B:          boundary, 所有边界条件是否满足
                BEEF:
                    boundary, error, empty, full

                    空指针，空数组， 0, 0.0, "", null
                    数组越界, 数据类型的最大值

                    满足条件的数值在边界上
                        如查找最大值，可将最大值设置在数组边界


                error, 错误的输入
                    一个名字为"jkfdkl;sajwe34790438759#$@#$@"的文件
                    格式错误，如abc@123作为邮件地址

                    一些不符合逻辑的数值，如一个人的年龄为100000岁
                    不符合要求的数据
                        如要求传入一个不允许重复的list，但是却传入一个有重复数值的list
                        要求是一个有序的list，但是却传入一个无序的list
                        或者一个排序算法要求传入一个无序的list, 但是传入一个排好序的list
                            或者传入一个反序的list

                    错误的顺序
                        如登陆之前就尝试打印文档

                CORRECT
                    Conformance: 一致性, 值是否和预期的一致
                                    完备性， 如一个email格式，是否能够满足所有协议中规定的格式

                    Ordering:    顺序性， 输入的顺序，有序，无序，错误的顺序
                                   搜索程序都应该对目标最前面和最后的情况进行测试

                                   如排序程序，输入序列是已经排好顺序的情况会如何
                                    输入序列是反序会如何

                    Range：      区间性， 最大值，最小值，空
                                    考虑输入的范围， 如角度[0, 359], 人的年龄[0, 150]

                                    对于索引的测试
                                        开始索引和结束索引具有相同的值
                                        第一个索引大于最后一个索引
                                        索引是负值
                                        索引值大于允许值


                    Reference:   依赖性，是否引用了不在代码本身控制范围的外部资源
                    Existence:   存在性， null, 0, "", int[0], 
                    Cardintity:  基数性， 是否恰好有足够的值
                                    fencepost error
                                    距离和标尺之间的关系：
                                        距离 = 标尺点 - 1

                                只需要考虑三种情况： 0, 1, n


                    Time:        时间性， 所有事情发生是否有序，是否在正确的时间，是否及时？
                                同步问题

    C:          cross-checking, 能用其他手段交叉检查一下结果吗
                比如一个写排序程序， 可以使用标准库来验证

    E:          强制错误条件发生
                    没有内存
                    磁盘满
                    时钟出问题
                    网线断掉
                    CPU占用率高

    P:          是否满足性能要求

todo:
page 53


使用Mock对象
    
    使用Mock对象替换依赖的对象
    理由

