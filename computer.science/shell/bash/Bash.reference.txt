Bash reference

echo $(MAKE_VERSION) | sed "s/[^0-9\.].*//

w=`pnginfo $i` 不要写成：  w = `pnginfo $i` 等号前后不要加空格
算术运算：
let "nw=$w*3/4"


1. 注释 
Example:
    # This is a comment


2. 转义字符 
Example:
    rm *
    ls ??
    cat file[1-3]
    echo "How are you?"


3. 输出 
Example:
    echo "Hello world"


3. 局部变量 

Example:
    variable_name=value
    declare variable_name=value
    name="John Doe"
    x=5
注：等号两边不能有空格存在


4. 全局变量 

Example:
    export VARIABLE_NAME=value
    declare -x VARIABLE_NAME=value
    export PATH=/bin:/usr/bin:.


5. 变量输出 

Example:
    echo $variable_name
    echo $name
    echo $PATH


6. 输入 

Example:
    read variable_name
    read name1 name2 ...


7. 参数 

Example:
    $scriptename arg1 arg2 arg3
    在脚本内可以使用如下方式访问参数
    echo $1 $2 $3    输出参数arg1, arg2, arg3
    echo $*             输出所有参数
    echo $#             输出参数个数


8. 数组 

Example:
    declare -a array_name=(world1 world2 world3 ...)
    declare -a fruit=(apples pears plums)
    echo ${fruit[0]}


9. 命令 

 Example:
    variable_name=`command`
    variable_name=$(command)


10. 算术操作 

Example:
    declare -i variable_name
    typeset -i variable_name
    ((n=5+5))
    echo $n


11. test命令操作符 

    ==
    !=
    »
    »=
    «
    «=


12. if条件语句 
Example:

    if command
    then
        block of statements
    fi

    if command
    then
        block of statements
    elif command
    then
        block of statements
    fi

    if [[ expression ]]
    then
        block of statements
    fi

    if (( numeric expression ))
    then
        block of statements
    else
        block of statements
    fi


13. case语句 

Example:
    case variable_name in
        pattern1)
            statements
            ;;
        pattern2)
            statements
            ;;
        pattern3)
            statements
            ;;
    esac


14. 循环 

Example:
    while command
    do
        block of statements
    done

    until command
    do
        block of statements
    done

    while [[ string expression ]]
    do
        block of statements
    done

    until [[ string expression ]]
    do
        block of statements
    done

    for variable in word_list
    do
        block of statements
    done

    select variable in word_list
    do
        block of statement
    done


15. 函数 

Example:
    function_name() {
        block of code
    }

    function function_name {
        block of code
    }


16. 字符串操作

${variable#pattern}:
如果模式匹配变量取值的开头，删除最短的匹配部分，并返回其余部分

${variable##pattern}:
如果模式匹配变量取值的开头，删除最长的匹配部分，并返回其余部分

${variable%pattern}:
如果模式匹配变量取值的结尾，删除最短的匹配部分，并返回其余部分

${variable%%pattern}:
如果模式匹配变量取值的结尾，删除最长的匹配部分，并返回其余部分

其中 , # 表示掐头， 因为键盘上 # 在 $ 的左面。
其中 , % 表示去尾， 因为键盘上 % 在 $ 的右面。
单个的表示最小匹配，双个表示最大匹配。
也就是说，当匹配的有多种方案的时候，选择匹配的最大长度还是最小长度。

${variable/pattern/string}:
${variable//pattern/string}:
将variable中匹配模式的最长部分替换为string，第一种格式中，只有第一个匹配部分会被替换，而第二种模式中，所有的匹配部分均被替换。

如果模式以#开头，则必须匹配variable的开头，如果模式以%开头，则必须匹配variable的结尾
如果string为null，匹配部分将被删除，如果variable为@或*，操作被依次应用于每个位置参数并且扩展为结果列表

假如path取值为/home/simaopig/demo/log.file.name，则
$(path##/*/)    log.file.name
$(path#/*/) simaopig/demo/log.file.name
$path   /home/simaopig/demo/log.file.name
${path%.*}  /home/simaopig/demo/log.file
${path%%.*} /home/simaopig/demo/log



sudo apt-get install imagemagick --fix-missing
sudo apt-get install pngtools
图片批量缩放工具
jiangrui@jiangrui-desktop:~$ cat scale_image.sh
#!/bin/bash
chmod +w -R *
for i in `find . -name '*.png' -a ! -name '*.9.png'`
do
    echo $i
    w=`/usr/bin/pnginfo $i | /bin/grep 'Image Width:' | /usr/bin/awk '{print $3}'`
    h=`/usr/bin/pnginfo $i | /bin/grep 'Image Width:' | /usr/bin/awk '{print $6}'`
    echo "width: "$w " height: " $h
    let "nw=$w*3/4"
    let "nh=$h*3/4"
    echo "width: "$nw " height: " $nh
    /usr/bin/convert -quality 100 -geometry "$nw"x"$nh" $i $i
done

