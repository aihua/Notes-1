
处理http请求的基本流程：
    容器
        创建一个HttpServletRequest和一个HttpServletResponse 
        创建一个线程
        找到对应servlet
        调用servlet service()方法
            -> doGet
                生成html,并将html放到响应中
            -> doPost

        线程结束
        容器将HttpServletResponse转化为一个http response
        容器将http response返回给客户


xml基本配置 (DD, 部署描述文件)

    建立servlet名字和类的关系
    <servlet> 
        <servlet-name>Hello Servlet</servlet-name>
        <servlet-class>com.springapp.mvc.HelloServlet</servlet-class>
    </servlet>

    建立servlet名字和url的关系
    <servlet-mapping>
        <servlet-name>Hello Servlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>


serlet的状态:

            -------init()---->
    不存在                      完成初始化 (loop: service())
            <------destroy()---
    
javax.servlet.Servlet
    public void init(ServletConfig config) throws ServletException;
        可以覆盖该方法， 如得到一个数据库连接，或者向其他对象注册

        不要在servlet的构造函数中做任何事情
        将初始化的动作放到init函数中

    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException;
    public void destroy();
                
       init() 是在一个单独的线程中运行

       每一个http request都是在一个新的服务线程中运行的 (或是后台有一个线程池)
            容器会为每个请求分配一个request和response
        
       一般一个servlet类都只会有一个对象， 除非在SingleThreadModel

    ServletConfig对象
        一个Servlet对应一个ServletConfig对象

        包括了servlet名字
        ServletContext
        初始化时的参数

    ServletContext对象
        每个web应用对应一个ServletContext (or AppContext)
        每个web应用对应一个java虚拟机
        
        提供web应用的参数
        提供一些web应用中公共的属性，供所有servlet访问

        用于获取web应用中的资源

        


       
