
groupId, artifactId, version

    定义了一个项目的基本坐标
    Maven中， 任何jar, pom, war都是基于这个坐标的。

    groupId
        定义了项目属于哪个组, 和组织, 公司项目关联
        类似与包名
        example:
            <groupId>com.juvenxu.mvnbook</groupId>
            <groupId>com.pekall.mdv</groupId>
            <groupId>com.pekall.lotto</groupId>

    artifactId
        在group中的唯一id
        example:
            <artifactId>plist</artifactId>
            <artifactId>hello-world</artifactId>

    version
        升级后版本会上升
        <version>1.0-SNAPSHOT</version>
name 
    可选的用户友好的名字
    推荐


定义依赖:
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.7</version>
            <!-- 如果本地没有junit, maven会自动下载junit 4.7 (from http://repol.maven.org/maven2/) -->

            <scope>test</scope>
            <!-- 仅仅对测试代码有效 
                在测试代码中import JUnit有效， 在源代码中import JUnit没有效果
            -->
        </dependency>
    </dependencies>

    依赖范围:
        compile:
            编译依赖范围, 缺省值
            对于编译，测试和运行三种classpath都有效
            编译，测试和运行都需要使用到该依赖

        test:
            仅仅测试时使用到该依赖
            编译项目源代码和运行项目时都无法使用该依赖

        provided:
            编译和测试有效, 运行时无效

        runtime:
            测试和运行时有效，编译主代码时无效

        system:
            和provided一致。但是必须通过systemPath显示指定依赖文件路径
            谨慎使用

        import:
            不会对三种classpath产生影响

    可选依赖:
        <optional>true<optional>
        比如一个项目的数据库可能是mysql或postgresql, 那么可定义这两个模块为可选依赖

        :w


声明jar文件main方法：

  	  <plugin>
  	    <groupId>org.apache.maven.plugins</groupId>
  	    <artifactId>maven-shade-plugin</artifactId>
  	    <version>1.2.1</version>
  	    <executions>
  	      <execution>
  	        <phase>package</phase>
  	        <goals>
  	          <goal>shade</goal>
  	        </goals>
  	        <configuration>
  	          <transformers>
  	            <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
  	              <mainClass>com.juvenxu.mvnbook.helloworld.HelloWorld</mainClass>
  	            </transformer>
  	          </transformers>
  	        </configuration>
  	      </execution>
  	    </executions>
  	  </plugin>
 

