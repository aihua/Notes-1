package com.pekall.plist.beans;

import java.util.Arrays;

/**
 * MDM checking request
 */
public class CheckInRequestMsg extends BeanBase {
    /**
     * Type of the check-in request, see MessageType
     */
    public static final String TYPE_AUTH = "Authenticate";
    public static final String TYPE_TOKEN_UPDATE = "TokenUpdate";
    public static final String TYPE_CHECK_OUT = "CheckOut";
    /**
     * Type of the check-in request, see TYPE_AUTH, ...
     */
    private String MessageType;
    /**
     * The topic the device will listen to.
     */
    private String Topic;
    /**
     * The device's UDID.
     */
    private String UDID;

    // Following fields are only for TokenUpdate

    /**
     * The Push token for the device.
     */
    private byte[] Token;
    /**
     * The magic string that must be included in the push notification message.
     * This value is generated by the device.
     */
    private String PushMagic;

    /**
     * Optional. A data blob that can be used to unlock the device. If provided,
     * the server should remember this data blob and send it with the
     * “ClearPasscode Commands Clear the Passcode for a Device” command.
     */
    private byte[] UnlockToken;

    public CheckInRequestMsg() {
    }

    public CheckInRequestMsg(String messageType, String topic, String UDID) {
        MessageType = messageType;
        Topic = topic;
        this.UDID = UDID;
    }

    public String getMessageType() {
        return MessageType;
    }

    public void setMessageType(String messageType) {
        MessageType = messageType;
    }

    public String getTopic() {
        return Topic;
    }

    public void setTopic(String topic) {
        Topic = topic;
    }

    public String getUDID() {
        return UDID;
    }

    public void setUDID(String UDID) {
        this.UDID = UDID;
    }

    public byte[] getToken() {
        return Token;
    }

    public void setToken(byte[] token) {
        Token = token;
    }

    public String getPushMagic() {
        return PushMagic;
    }

    public void setPushMagic(String pushMagic) {
        PushMagic = pushMagic;
    }

    public byte[] getUnlockToken() {
        return UnlockToken;
    }

    public void setUnlockToken(byte[] unlockToken) {
        UnlockToken = unlockToken;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CheckInRequestMsg)) return false;

        CheckInRequestMsg msg = (CheckInRequestMsg) o;

        if (MessageType != null ? !MessageType.equals(msg.MessageType) : msg.MessageType != null) return false;
        if (PushMagic != null ? !PushMagic.equals(msg.PushMagic) : msg.PushMagic != null) return false;
        if (!Arrays.equals(Token, msg.Token)) return false;
        if (Topic != null ? !Topic.equals(msg.Topic) : msg.Topic != null) return false;
        if (UDID != null ? !UDID.equals(msg.UDID) : msg.UDID != null) return false;
        if (!Arrays.equals(UnlockToken, msg.UnlockToken)) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = MessageType != null ? MessageType.hashCode() : 0;
        result = 31 * result + (Topic != null ? Topic.hashCode() : 0);
        result = 31 * result + (UDID != null ? UDID.hashCode() : 0);
        result = 31 * result + (Token != null ? Arrays.hashCode(Token) : 0);
        result = 31 * result + (PushMagic != null ? PushMagic.hashCode() : 0);
        result = 31 * result + (UnlockToken != null ? Arrays.hashCode(UnlockToken) : 0);
        return result;
    }

    @Override
    public String toString() {
        return "CheckInRequestMsg{" +
                "MessageType='" + MessageType + '\'' +
                ", Topic='" + Topic + '\'' +
                ", UDID='" + UDID + '\'' +
                ", Token=" + Arrays.toString(Token) +
                ", PushMagic='" + PushMagic + '\'' +
                ", UnlockToken=" + Arrays.toString(UnlockToken) +
                '}';
    }
}
