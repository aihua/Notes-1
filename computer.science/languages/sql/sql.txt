SQL 基础

基本概念：
    数据库
    模式 schema
        描述数据库和表的布局和特性的信息
    表 table
    列 column
        表中的一个字段
    数据类型 datatype
    行 row
        一条记录
    主键 primary key
        行的唯一标识 
        主键的规则：
            每行必须有主键
            行的主键必须不同
            不允许修改主键
            不允许重用主键（一行删除后，其主键不可分配给新行）
            主键可以是一行， 也可是多行
    外键
    子句 clause
        FROM, ORDER BY, where ...

SQL大小写不敏感
SQL自动忽略白字符
SQL语句后最好加上分号
字符串需用单引号括起， 数值类型直接写

SELECT:
    SELECT prod_name FROM Products;
    SELECT prod_id, prod_desc FROM Products;
    SELECT * FROM Products;             -- 检索不需要的列会降低应用程序的性能

DISTINCT:
    SELECT DISTINCT vendor_id from products; -- 去掉重复的值
    SELECT DISTINCT vendor_id, prod_price from products; -- DISTINCT同时作用于vendor_id和prod_price

LIMIT:
    SELECT vendor_id from products LIMIT 5;
    SELECT vendor_id from products LIMIT 0,5; -- 从第0行开始，总共5个数据

    limit应该放在where, order by之后

ORDER BY:    
    SELECT prod_id, prod_desc FROM Products ORDER BY prod_desc;

    DESC
        默认顺序(ASC)是A-Z, DESC是Z-A

        SELECT prod_id, prod_desc FROM Products ORDER BY prod_desc DESC; 反序
        SELECT prod_id, prod_desc FROM Products ORDER BY prod_desc DESC, prod_id; 反序

    SELECT prod_id, prod_desc FROM Products ORDER BY 1; 按照第一列排序
    SELECT prod_id, prod_desc FROM Products ORDER BY 1, 2; 先按照第一列，然后第二列排序

    如果不指明ORDER BY, 输出的顺序是数据添加时间的先后顺序.
    ORDER BY应该是SELECT语句中的最后一个clause

    combo技能:
       -- 找出最贵的商品
       select prod_price from product order by prod_price desc limit 1;

       -- 找出最贵的所有商品
       select prod_id, prod_price from product where prod_price in 
            (select prod_price from product order by prod_price desc limit 1);

WHERE:
    过滤数据应该在sql中，而不是在应用中过滤

    select * from Products where prod_price=3.49;
    比较符号，所有的c语言比较
        BETWEEN
        IS NULL

    select * from Products where prod_price between 3 and 10;
    select * from Vendors where vend_state is null;

    逻辑运算(语法和c语言类似，and优先级高于or):
        and
            select * from Products where prod_price<10 and vend_id='DLL01';
        or
            select * from Products where prod_price<10 or vend_id='DLL01';
            select * from Products where (vend_id='BRS01' or vend_id='DLL01') and prod_price > 4;
        in
            select * from Products where vend_id IN ('BRS01','DLL01');
            IN的速度较快
            not in/between/exists
        not
            select * from Products where vend_id NOT IN ('BRS01','DLL01');

    注意：字符串需要使用单引号括起，数值不用。

Wildchar
    % 正则表达式 ".*"
        可以匹配0个字符
        可以匹配数值类型的字段(test in mysql)
        '%',可以匹配几乎任何东西，包括空串。不过不可以匹配NULL

        select * from Products where vend_id like '%Ng%'; sqlite3大小写不敏感

    _ 正则表达式"."
        select * from Products where vend_id like 'D_01';

    [] 正则表达式 "[]" (sqlite3不支持)

    性能：
        不要过分使用通配符。如果其他操作能供完成相同功能，则避免使用通配符
        不要将它们放在搜索的最开始的地方

MySQL正则表达式
    select * from Products where vend_id regexp '100'; # grep 100 

    like和regexp的区别
        like当整列数据完全匹配

    select * from Products where vend_id regexp 'ignorecase';        # 默认不区分大消息
    select * from Products where vend_id regexp binary 'noignorecase'; # 通过binary来标明区分大小写

    select * from Products where vend_id regexp 'foo|bar'; # or
    select * from Products where vend_id regexp '[abc]bar';
    select * from Products where vend_id regexp '[^abc]bar';
    select * from Products where vend_id regexp '[0-9]bar';
    select * from Products where vend_id regexp '\\.bar';  # escaping

    测试正则表达式
    select 'hello' regexp 'hel'
    
计算字段：
    数据转换，计算，格式化

    拼接字段: concatenate. 可以是使用'+'或'||'
        将两列拼接起来
            SELECT vend_name || '(' || vend_country || ')' FROM Vendors; (sqlite)
            SELECT CONCAT(vend_name, '(', vend_country, ')') FROM vendors;
            SELECT CONCAT(TRIM(vend_name), '(', LTRIM(vend_country), ')') FROM vendors;
                TRIM, LTRIM, RTRIM用于删除空格

    别名: alias, 给新创建的
        select vend_name || '{' || vend_country || '}' as nc from Vendors order by vend_country;
        SELECT CONCAT(vend_name, '(', vend_country, ')') as title FROM vendors;

    计算： 支持 +, -, *, /
        select order_num, quantity, item_price, item_price*item_price as total 
            from OrderItems 
            where order_num=20008;

        测试计算：
            select 3*2;
            select now();

    注意：在sql中使用计算比应用程序中的性能要高

函数：
    字符串处理:
        select prod_name, upper(prod_name) from Products;
        upper, lower
        left, right
        ltrim, rtrim
        soundex
        substring
        length

        (not in sqlite) left soundex

        函数的移植性不是很好

时间日期：
    select prod_name from products where order_date = '2014-09-01'; # error

    login_time的类型是datetime

    # 使用date函数提取日期
    select login_time from mdm_auth_login_log where date(login_time) = '2014-08-27';

    # 使用time函数提取时间
    select login_time from mdm_auth_login_log where time(login_time) = '13:34:08';

    select login_time from mdm_auth_login_log where date(login_time) between '2005-09-01' and '2005-09-30';
    select login_time from mdm_auth_login_log where year(login_time)='2005' and month(login_time)='9';

    函数
        date, time, year, month, day, dayofweek, hour, minute, second,

        adddate, addtime, 
        curdate, curtime, now
        datediff
        date_and
        date_format
数值计算：
    sin, cos, tan,
    abs, mod, exp, sqrt
    pi,
    rand

汇总数据:
    count() 
        count(*)
            包括所有行
        count(column_name)
            不统计该列null值
        distinct (key word), 统计行的个数，但是所有相同的行记为一行

    avg() max() min() sum()

    select min(quantity) as min, max(quantity) as max, avg(quantity) as avg from OrderItems;
    select count(distinct prod_price) from Products; 

数据分组:
    将数据划分为多个逻辑分组，对每个分组进行聚集

    select vend_id, count(*) as num_prods from Products group by vend_id;

    # 查看每个企业有多少管理员
    select domain, count(*) from mdm_auth_user group by domain;

    group by的基本逻辑是
        1. sort_table_by_group();
        2. for(line=first_line;line<=last_line;line++)
            if(where(line)) 
                // if(just_col) print(line)
                if(count())
                    count++;
                if(sum())
                    sum+=val(line);
                ...

            if(having(group) && end_of_group(line))
                print(line) | print(sum()) | print(count)
                clear sum, clear count

        注意下面语句的执行结果, 为什么不能实现等效的分组功能?
            sqlite> select vend_id, count(prod_price) from Products where vend_id in (select distinct vend_id from Products);
            vend_id     count(prod_price)
            ----------  -----------------
            FNG01       9          

    group by
        可以包括任意多个列
            比如一个市有多个高中，每个高中有多个年级，每个年级有n个班级。
                对学校分组
                对学校，年级同时分组
                对学校，年级, 班级同时分组

            现在需要找出人数最多的班级？
            现在需要找出人数大于60的班级？

            select school_name, grade_name, class_name, count(*) as cnt
                from stud_table 
                group by school_name, grade_name, class_name
                having cnt>60

        group by中每个列都必须是检索列或有效表达式，不能使聚集函数。
        如果分组列中有NULL, 那么NULL作为一个分组返回
        group by必须在where后，order by之前

    having
        过滤分组
         select vend_id, sum(prod_price) as sum from Products group by vend_id having sum > 16; 
         select vend_id, sum(prod_price) as sum from Products group by vend_id having count(*) >= 3; 

        where是对列进行过滤
        having是对分组进行过滤

        where在数据分组之前进行过滤
            where排除的行不在分组中

            // 找出提供了三件价格大于10的商品的供货商
            select vend_id, count(*) as cnt 
                from Products 
                where prod_price >= 10
                group by vend_id 
                having count(*) >= 3; 

        having在数据分组之后进行过滤

        having支持所有的where操作符

    select句子顺序：
        select 
        from
        where
        group by
        having
        order by
        limit
    
子查询：    
    select * from mdm_auth_role as r where r.id in   
        (select role_id from mdm_auth_role_perm as rp 
            where rp.perm_id='perm_id_aaaaaaaaaaaaaaaaaaaaaa33');

    标量子查询 = 
        select * from mdm_auth_role as r where r.id =
            (select role_id from mdm_auth_role_perm as rp 
                where rp.perm_id='perm_id_aaaaaaaaaaaaaaaaaaaaaa33');
            如果子查询返回多个值，则语句失败

        # 选择出注册时间最早的设备
        select * from mdm_device_info device
            where device.create_time = (select min(create_time) from mdm_device_info);

        # 选择考试成绩高于平均分数的同学
        select tb_student.* tb_score.score from tb_studuent inner join tb_score
            on tb_studuent.id = tb_score.student_id 
            and tb_score.score > (select avg(score) from tb_score)

        # 选择和adams来自于同一个城市和州的总统
        select * from president
            where (city, state) = 
            # where row(city, state) = 语法等价
            (select city, state from president 
                where name = 'adams');

    IN, NOT IN
        子查询返回多行

        # 查找有缺勤记录的学生
        SELECT * FROM student
            WHERE student.id IN (SELECT DISTINCT id from absent);

        SELECT * FROM student
        WHERE EXISTS (SELECT * from absent where absent.student_id = student.id);


        # 查找没有缺勤记录的学生
        SELECT * FROM student
            WHERE student.id NOT IN (SELECT DISTINCT id from absent);

        SELECT * FROM student
        WHERE NOT EXISTS (SELECT * from absent where absent.student_id = student.id);


        # 选择和名字中包括了adams的来自于同一个城市和州的总统
        select * from president
            where (city, state) in 
            (select city, state from president 
                where name like '%adams%');

    ALL, ANY, SOME

        # 选择出注册时间最早的设备
        SELECT * FROM mdm_device_info device
            WHERE device.create_time <= ALL(SELECT create_time FROM mdm_device_info);

        # 选择出注册时间最晚的设备
        SELECT * FROM mdm_device_info device
            WHERE device.create_time >= ANY(SELECT create_time FROM mdm_device_info);

        ANY等价于SOME
        IN 等价于 = ANY
        NOT IN 等价于 <> ALL
        
    EXIST, NOT EXIST
        # 测试某个子查询是否返回了任何数据
        select exist (select * from student);

    from中的子查询
        select * from (select id, name from student) as test;

    0.select的基本逻辑是
        for(line=first_line;line<=last_line;line++)
            if(where(line)) 
                if(just_col) 
                    print(line)
                if(count())
                    count++;
                if(sum())
                    sum+=val(line);
                ...
        print(sum()) | print(count) | ...

    1. group by的基本逻辑是
        sort_table_by_group()
        for(line=first_line;line<=last_line;line++)
            if(where(line)) 
                // if(just_col) print(line)
                if(count())
                    count++;
                if(sum())
                    sum+=val(line);
                ...

            if(end_of_group(line) && having(group))
                print(line) | print(sum()) | print(count)
                clear sum, clear count

    统计订购了RGAN01的客户
        select * from customers where cust_id in 
            (select cust_id from orders where order_num in 
                (select order_num from orderitems where prod_id='RGAN01'));

    和group by的区别
        group by是将很多行进行分组，显示出来
        子查询只是寻找满足要求的几行

    嵌套查询时，只能查询单个列
    子查询比不是最有效率的方法

    统计每个客户的订单数目:
        select cust_name, cust_state, 
            (select count(*) from orders
                where orders.cust_id=customers.cust_id) 
                as orders
        from customers
        order by cust_name

    能否这样实现order表中对cust_id的分组?
        select order_num, 
            (select count(*) from orders
                where orders.cust_id=orders.cust_id) --这句话的语法没问题，但是语意含糊
                as orders
        from orders

    思路：先确定出几张表，写出最内层的查询，然后扩展到外层。
            一开始可以使用hardcode的数据，然后将hardcode数据替换成sql句子

    练习：
        1.统计每个客户所有订单应付的价格
            select cust_name, cust_state, 
                (select sum(quantity*item_price) 
                    from orderitems 
                    where orderitems.order_num=
                        (select order_num 
                            from orders 
                            where orders.cust_id=customers.cust_id)) 
            as price_summary 
            from customers
            order by cust_name

        2. 查询客户Fun4All的所有订单号
        select * from orders where cust_id in
            (select cust_id from customers where cust_name='Fun4All')

        3. 查询客户Fun4All的所有供货商

            select vend_name from vendors where vend_id in
                (select vend_id from products where prod_id in 
                    (select prod_id from orderitems where order_num in
                        (select order_num from orders where cust_id in
                            (select cust_id from customers where cust_name="Fun4All"))))

        4. 查询每个客户的供应商个数
            select cust_name, cust_state, 
                (select count (*) from vendors where vend_id in
                    (select vend_id from products where prod_id in 
                        (select prod_id from orderitems where order_num in
                            (select order_num from orders where orders.cust_id=customers.cust_id))))
            as vend_cnt 
            from customers
            order by cust_name

            列举出每个客户的供应商
                select vend_name from vendors where vend_id in
                (select vend_id from products where prod_id in 
                 (select prod_id from orderitems where order_num in
                  (select order_num from orders where cust_id in
                   (select cust_id from customers))))

关系数据库
    尽量少的出现重复数据
    将数据分解成多个表
    各个表通过“关系“(relational)互相关联

联结 join
    使用一条select语句查询多个表中的数据

    select cust_name,cust_state,order_num 
        from customers, orders 
        where customers.cust_id=orders.cust_id;

    笛卡尔积 (catesian product)
        没有联结条件的查询返回的结果
        结果的行数等于第一个表的行数乘以第二个表的行数 

        select * from orders, orderitems;
            将orders表和orderitems表中的数据全部组合起来输出.
            如果orders表中有5行， orderitems表中有18行，那么输出会有5*18行
        
    等值联结 equijoin
        基于值相等的联结, 又称为内联结

        不同的语法(相同的结果)
        select cust_name,cust_state,order_num 
            from customers inner join orders 
            on customers.cust_id=orders.cust_id;

    联结的表越多，性能越低

    练习：
        查询订购了RGAN01的客户列表

        select cust_name, orderitems.prod_id, orders.order_num
        from customers, orders, orderitems
        where customers.cust_id=orders.cust_id 
            and orders.order_num=orderitems.order_num 
            and orderitems.prod_id='RGAN01'

        select * from customers where cust_id in 
            (select cust_id from orders where order_num in 
                (select order_num from orderitems where prod_id='RGAN01'));

问题：
    是不是所有可以通过子查询解决的都可以通过联结来解决

表别名：
    缩短sql语句

        select cust_name, toi.prod_id, toi.order_num
            from customers as tc, orders as ot, orderitems as toi
            where tc.cust_id=ot.cust_id 
                and ot.order_num=toi.order_num 
                and toi.prod_id='RGAN01'

        select tc.*, toi.prod_id, toi.order_num
        from customers as tc, orders as ot, orderitems as toi
        where tc.cust_id=ot.cust_id 
            and ot.order_num=toi.order_num 
            and toi.prod_id='RGAN01'

自联结
    联结相同的表

    找出联系人是Jim Jones公司的其他联系人
    子查询方法：
    select cust_id, cust_name, cust_contact 
    from customers 
    where cust_name=
        (select cust_name 
        from customers 
        where cust_contact='Jim Jones')
    
    自联结方法:
    select c1.cust_id, c1.cust_name, c1.cust_contact 
        from customers as c1, customers as c2 
        where c1.cust_name=c2.cust_name and c2.cust_contact='Jim Jones';

    许多数据库处理自联结的方法比子查询快

自然联结

外部联结
    包括了没有关联的行
    必须使用left, right, full指定需要全部显示的行

    对每个客户下了多少订单进行统计
    select ct.cust_id, cust_name, ot.*
    from customers as ct, orders as ot
    where ct.cust_id=ot.cust_id;

    对每个客户下了多少订单进行统计, 包括没有下订单的客户
    select ct.cust_id, cust_name, ot.*
    from customers as ct left out join orders as ot
    on ct.cust_id=ot.cust_id;
    
    简化的外部联结语法
    select ct.cust_id, cust_name, ot.*
    from customers as ct, orders as ot
    where ct.cust_id*=ot.cust_id;

    对每个客户下了多少订单进行统计, 显示出数目
    select ct.cust_id, cust_name, count(*) as cnt
    from customers as ct, orders as ot
    where ct.cust_id=ot.cust_id
    group by ct.cust_id

    group by
        对于统计数目的问题可简化为两个子问题
            1.将需要统计的数据都列举出来
            2.进行分组

组合查询 (compound query)
    将多条语句的查询结果作为单个语句的结果返回 
    union
        每个查询必须包括相同的列，表达式，聚集函数
        会自动去掉重复的行
        只允许一条order by句子, 会对所有结果进行排序

    组合查询是加法的逻辑，联结是乘法的逻辑

    select * from customers
    where cust_state in ('IL', 'IN', 'MI')
    union
    select * from customers
    where cust_name='Fun4All'
    order by cust_id

    不去掉相同的行, union all
    select * from customers
    where cust_state in ('IL', 'IN', 'MI')
    union all
    select * from customers
    where cust_name='Fun4All'

    等效查询
    select * from customers
    where cust_state in ('IL', 'IN', 'MI') 
        or cust_name='Fun4All'
--------------------------------------------------------------------------------
select思路：
    确定使用的表
        想一想结果,和哪一张表最接近
    画出相关表之间的关系
    确定使用的方法，count, sum,...

    从最简单的开始写
    想想需要的所有数据，笛卡尔积

    select的基本逻辑是
        for(line=first_line;line<=last_line;line++)
            if(where(line)) 
                if(just_col) 
                    print(line)
                if(count())
                    count++;
                if(sum())
                    sum+=val(line);
                ...
        print(sum()) | print(count) | ...

    group by的基本逻辑是
        sort_table_by_group()
        for(line=first_line;line<=last_line;line++)
            if(where(line)) 
                // if(just_col) print(line)
                if(count())
                    count++;
                if(sum())
                    sum+=val(line);
                ...
            if(end_of_group(line) && having(group))
                print(line) | print(sum()) | print(count)
                clear sum, clear count

where和having的区别
    where是对列进行过滤
    having是对分组进行过滤

    where在数据分组之前进行过滤
        where排除的行不在分组中

    having在数据分组之后进行过滤

select句子顺序：
    select 
    from
    where
    group by
    having
    order by
--------------------------------------------------------------------------------
不同类型的联结
    内部联结（等值联结，equijion）
        inner join
        select cust_name,cust_state,order_num from customers inner join orders 
            on customers.cust_id=orders.cust_id;

        cross join, join 等价于inner join
        逗号操作符 (等价于innter join) : 尽量避免
            select t1.*, t2.* from t1, t2 where t1.i1 = t2.i2;

    自联结
        应用范围：同一张表中
        应用场景：知道一个字段A的查询值, 需要查一个字段B
        
        -- 查找邮件为‘daiwz@zjipst.com’的用户所在企业的所有用户

        使用子查询
        select * from mdm_auth_user where domain in 
            (select domain from mdm_auth_user where username regexp 'daiwz@zjipst.com')

        使用自联结
        select u1.*, u2.* from mdm_auth_user u1, mdm_auth_user u2
            where u1.username regexp 'daiwz@zjipst.com' 
            and u1.domain= u2.domain;

        自联结的性能有时候比子查询好

    外部联结
        包括没有关联的行

        left/right [outer] join
            left 指定包括左边表的所有行
            right 指定包括右边表的所有行
            同义词：

        // 查看所有用户的所有设备
        select u.account, d.device_name from mdm_user u, mdm_device_info d             
            where u.account = d.account order by u.account;

        // 查看所有用户的所有设备, 包括没有设备的用户
        select u.account, d.device_name from mdm_user u left outer join mdm_device_info d 
            on u.account = d.account  order by u.account;

        // 查看所有用户的设备数量
        select u.account, count(d.device_name) from mdm_user u, mdm_device_info d             
            where u.account = d.account group by u.account order by u.account;

        // 查看所有用户的设备数量, 包括没有设备的用户
        select u.account, count(d.device_name) from mdm_user u left outer join mdm_device_info d 
            on u.account = d.account  group by u.account order by u.account;

        select u.account from mdm_user u 
            where u.account not in (select d.account from mdm_device_info d);

    使用聚集函数
        // 查看所有用户的设备数量
        select u.account, count(d.device_name) from mdm_user u inner join mdm_device_info d             
            on u.account = d.account group by u.account order by u.account;

todo:
--------------------------------------------------------------------------------
解决问题的工具：
    一张表或多张表

    子查询
        在where句子中 
        在column中，一般使用聚集函数

        子查询SELECT只能返回单个列
        思路：
            1. 观察表， 画出表的关联
            2. 分解查询需求， 将不同功能划分到不同的表中
            3. 写出分解功能的SELECT语句
            4. 拼接出整个SELECT语句

    联结
        想笛卡尔积

    group by
        对于统计数目的问题可简化为两个子问题
            1.将需要统计的数据都列举出来
            2.进行分组

    考虑空的情况
--------------------------------------------------------------------------------
组合查询

    union
        类似OR
        union all: 包括重复的行

        简化复杂的where句子

    view

全文搜索：

    CREATE TABLE productnotes
    (
     note_id    int           NOT NULL AUTO_INCREMENT,
     prod_id    char(10)      NOT NULL,
     note_date datetime       NOT NULL,
     note_text  text          NULL ,
     PRIMARY KEY(note_id),
     FULLTEXT(note_text)        # 索引单个列
    ) ENGINE=MyISAM;            # 必须使用MyISAM引擎

    不要再导入表的时候启用FULLTEXT。导入数据后，在alter表

    SELECT note_text FROM productnotes WHERE MATCH(note_text) AGAINST('rabbit');

插入数据
    插入完整的行
    insert into customers
    values('1000000006',
            'Toy Land',
            '123 Any Street',
            'New York',
            'NY',
            '11111',
            'USA',
            NULL,
            NULL)

    良好的书写习惯
    insert into customers(cust_id,
            cust_name,
            cust_address,
            cust_city,
            cust_state,
            cust_zip,
            cust_country,
            cust_contact,
            cust_email)
    values('1000000007',
            'Toy Land',
            '123 Any Street',
            'New York',
            'NY',
            '11111',
            'USA',
            NULL,
            NULL)

    插入部分内容
    insert into customers(cust_id,
            cust_name)
    values('1000000007',
            'Toy Land')

    插入多行
    insert into customers(cust_id,
            cust_name)
    values('1000000007', 'Toy Land'),
          ('1000000008', 'Ray Jiang')

    省略列
        该列定义允许为NULL
        表的定义中给出了默认值
        否则，dbms将产生一条错误消息

    insert select
    从一张表中选择数据，然后插入到另外一张表中
        insert into customersNew(cust_id,
                cust_name)
        select cust_id, cust_name
        from customers
        where ...

        注意，列的名字不需要一样

    (创建并)复制表
        select * 
        into custNew
        from customers;

        (sqlite不支持)

        create table custnew as
        select *
        from customers
        where ...
        group by ...

    
    INSERT LOW_PRIORITY INTO
        降低insert的优先级, 提高性能

更新行
    UPDATE tb_name 
    set col=value [,col=value]
    where ...                   # 如果没有where, 则更新所有行

    update customers
    set cust_contact='Jiang Rui',
    cust_email='jiangrui-tr2008@hotmail.com'
    where cust_id='1000000007'

    删除某一项
    update customers
    set cust_contact=NULL
    where cust_id='1000000007'

删除行
    delete from table
    where ...           # 如果没有where, 将删除表中所有记录

    delete from customers
    where cust_id='1000000007'

    删除所有数据, 但不删除表本身
    delete from customers

    同样功能，更高效率
    truncate table

    注意使用delete和update之前使用select测试一下where

    删除多个表中的数据
    delete tb1 from tb1 inner join tb2 where tb1.id = tb2.id;
    delete tb1, tb2 from tb1 inner join tb2 where tb1.id = tb2.id;

    技巧：
    将一个select 句子中最开始的select改写成delete

创建表
    [not] null default

    CREATE TABLE customers IF NOT EXISTS
    (
         cust_id      int       NOT NULL AUTO_INCREMENT,
         cust_name    char(50)  NOT NULL ,
         cust_address char(50)  NULL ,
         cust_city    char(50)  NULL ,
         cust_state   char(5)   NULL ,
         cust_zip     char(10)  NULL ,
         cust_country char(50)  NOT NULL DEFAULT 'CN',
         cust_contact char(50)  ,           # 默认就是null
         cust_email   char(255) ,           # 默认就是null
         PRIMARY KEY (cust_id)
    ) ENGINE=InnoDB;


    CREATE TABLE test 
    (
         test_id    char(10) NOT NULL, 
         test_name char(255) NULL, 
         test_price decimal(8,2) NOT NULL default 1,
         test_desc  text NULL
    );

    CREATE TABLE IF NOT EXISTS customers (id int NOT NULL);

更新表
    ALERT TABLE vendors 
    ADD vend_phone CHAR(20)

    ALERT TABLE vendors 
    DROP COLUMN vend_phone 

    ALTER TABLE orderitems 
    ADD CONSTRAINT fk_orderitems_orders 
    FOREIGN KEY (order_num) 
    REFERENCES orders (order_num);

删除表
    DROP TABLE vendors;

重命名表
    RENAME TABLE a_table TO a_new_table;

    RENAME TABLE a_table TO a_new_table
                 a_table_2 to a_new_table_2;

视图
    语法上等于一个select句子

    虚拟的表，包括动态的查询结果
    重用SQL句子
    格式化输出数据
    必须有唯一的名字
    可以嵌套
    不能索引，不能关联默认值和触发器

    select cust_name, cust_contact
    from customers as tc, orders as ot, orderitems as toi
    where tc.cust_id=ot.cust_id 
        and ot.order_num=toi.order_num 
        and prod_id='RGAN01'

    视图实现
    select cust_name, cust_contact
    from customerProduct
    where prod_id='RGAN01'


    列举出每个客户订购的商品
    select *
    from customers as tc, orders as ot, orderitems as toi
    where tc.cust_id=ot.cust_id 
        and ot.order_num=toi.order_num 

    create view viewname
    drop view viewname

    create view custProduct as
    select *
    from customers as tc, orders as ot, orderitems as toi
    where tc.cust_id=ot.cust_id 
        and ot.order_num=toi.order_num 

    视图对性能影响较大

存储过程：
    skip
    批处理过程
    执行一条或多条sql语句

    简单，安全，高性能

    执行存储过程
        execute addNewProduct('name', 'prod');


    定义存储过程
    delimiter ;;
    CREATE PROCEDURE prod_price (
            out price_min int,
            out price_max int,
            out price_avg int
            )
    BEGIN
    select min(prod_price) into price_min from products;
    select max(prod_price) into price_max from products;
    select avg(prod_price) into price_avg from products;
    END
    ;;
    delimiter ;

    调用存储过程
    call prod_price(@pmin, @pmax, @pavg);
    select @pmin, @pmax, @pavg;

使用游标 cursor
    
    结果集 result set
        sql查询得到的结果

    cursor
        一个结果集合

    declare c cursor for select * from customers;
    open cursor c;

    MySql中游标只能用于存储过程和函数
    
        delimiter ;;
        CREATE PROCEDURE dec_cursor ()
        BEGIN
            DECLARE ordernumbers CURSOR FOR
            SELECT order_num FROM orders;

            -- declare local variable
            DECLARE o INT;

            -- open cursor
            OPEN ordernumbers;

            -- get order number
            FETCH ordernumber INTO o;

            -- close cursor
            CLOSE ordernumber;
        END

        ;;
        delimiter ;

触发器
    todo:
    执行一个sql语句时，触发另外一些sql自动执行

    支持触发器的MySql语句
        delete, insert, update

管理事务
    InnoDB/Falcon支持事务
    
    ACID
        Atomic
            事物保证多个sql句子执行的原子性，要么完整执行，要么不执行
        Consistent
            稳定性, 不会破坏数据库中的数据的一致性
        Isolate
            隔离性，事务之间互补影响
            锁定级别
                表级别
                    MyISAM使用表级别锁定, 不同客户端不能同时修改同一个表
                行级别
                    InnoDB
            InnoDB
                事务隔离级别

                1. 脏读(dirty read): 
                    事务A做出的修改在提交前可以被其他事务看到
                    但是事务A可能还会回滚, 这将导致应用程序的逻辑混乱

                2. 不可重复读取(nonrepeatable read):
                    事务A执行了两次select语句。在这两个select句子中间，事务B对相关数据做了修改
                    导致事务A两次select的数据不一致
                3. 幻影数据行(phantom raw):
                    事务A执行了两次select语句。在这两个select句子中间，事务B添加了相关数据
                    导致事务A第二次select的数据增加了
 
                InnoDB提供的事务隔离级别
                read uncommitted: 允许某个事务A看到其他事务没有提交的数据改动
                read committed: 只允许某个事务A看到其他事务已经提交的改动
                repeatable read: 某个事务A两次select的结果一定是一致的。
                                即使有其他事务提交数据，对事务A都没有影响
                                innodb默认值
                serializable: 类似repeatable read，但是事务隔离更彻底。
                                某个事务A正在读取某些数据行，在它完成之前，
                                其他事务无法修改那些数据行。

                # 服务器级别
                SET GLOBAL TRANSACTION ISOLATION LEVEL level

                # session 级别, 客户端和服务器的本次会话
                SET SESSION TRANSACTION ISOLATION LEVEL level

                # 作用于下一次事务
                SET TRANSACTION ISOLATION LEVEL level
                    
        Durable
            可靠性。事务成功后，数据更定会保存到数据库中

    terminology
        transaction: 指一组sql语句
        rollback: 撤销指定sql语句的过程
        commit: 将未存储的sql语句结果写入数据库表
        savepoint: 事务中临时设置的占位符(placeholder), 可以对它进行rollback

    开始事务
        START TRANSACTION

        start transaction之后，会自动提交当前事务
            并开始一个新的事务

    提交事务
        START TRANSACTION;
        delete from orderitems where order_number = 21000;

        # 如果这一条sql语句执行失败，前面所有sql自动rollback
        delete from oders where order_number = 21000;   
        COMMIT;

        START TRANSACTION;
        insert into tb1 name = 'test';
        insert into tb1 name = 'test2'; # 这时在其他表中select是看不到test和test2的
        COMMIT

    禁止sql语句自动提交
        set autocommit = 0;
        然后执行的语句不会自动提交
        会进入当前事务
        直到执行commit或rollback语句


        set autocommit = 0; // begin transaction
        insert ...
        insert ...
        commit
        set autocommit = 1;
    ROLLBACK

        start TRANSACTION
        delete from table1;
        ROLLBACK

        insert, update, delete语句可以rollback

    save point
        用于部分提交和撤销

        SAVEPOINT delete1;
        ...
        ROLLBACK TO delete1;

        保留点越多越好

        执行一条rollback或commit后，save point自动释放
        RELEASE SAVEPOINT

    导致事务提交的场景
        在执行下面句子之前，数据库会提交当前事务
            set autocommit, start transaction, begin, commit, rollback
            用于创建，改变或删除数据库或表的DLL语句 (data definition language)
                drop database
                alert/drop/trancate/rename table
                create/drop index
                set autocommit = 1 (if it is 0)
            锁定有关的语句
                lock tables
                unlock tables (if table locked)

    导致事务结束的场景
        事务提交前，客户端和服务器之间连接断掉。服务器自动回滚


Done!
review

SELECT print_col [,print_col] | * 
FROM print_table
WHERE expr [,expr?]
GROUP BY col
HAVING expr
ORDER BY c1 [,c2] [DESC]
        
print_table:
    table | table as alias
print_col:
    col | function(col) | col math_op print_col |  print_col AS alias
col: 
    column | distinct column | table.column
func:
    avg|count|sum|max|min  |count(distinct col)
    upper|lower|length

expr:
    comp_expr | logic_expr

logic_expr:
    comp_expr log_op comp_expr [log_op comp_expr]
    NOT comp_expr

log_op:
    AND, OR,

comp_expr:
    col comp_op value
    col BETWEEN v1 AND v2
    col IS NULL
    col IN (v1[,v2])
    col LIKE v1

comp_op:
    =, >, <, !=, >=, <=, !<, !>
    LIKE

LIKE通配符 ：
    %表示任意字符出现任何次数， 等于正则表达式中'.*'
    _表示一个任意字符，等于正则表达式'.'
    []等于正则表达式中'[]'
    [^]等于正则表达式中'[^]'

DESC为降序排列

CREATE TABLE test 
(
     test_id    char(10) NOT NULL, 
     test_name char(255) NULL, 
     test_price decimal(8,2) NOT NULL default 1,
     test_desc  text NULL
);

DROP TABLE vendors

INSERT:
    insert into table [(col_name1[,col_name2])] value_clause
    value_clause: values(col_val1[,col_val2]) | select clause

UPDATE:
    update table 
    set col=value [,col=value]
    where ...

DELETE:
    delete from table
    where ...

CREATE VIEW view_name AS
select clause

字段的拼接：
v1 [|| v2|'char']

数据库程序设计时，从数据库中获取的cursor最好能和应用程序的数据结构一致。
比如browser的书签，需要文件夹（一层）来管理书签。那么从书签表中获取
orderby = "folder_id, _id"的cursor。 那么选取出的数据的排列正好和UI中需要
绘制的文件夹结构基本一致。 书签文件夹按照folder_id排列， 文件夹中的书签
按照书签_id排列。这样创建ui的时候，只需要对cursor从头到位遍历一遍即可。
尽量要避免多次查询数据库。

习惯
    保证每个表都有主键
    在update和delete之前，对其后的where句子要进行检验（使用select)


Congratulation!


