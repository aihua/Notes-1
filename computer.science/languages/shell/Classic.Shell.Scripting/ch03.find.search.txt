Search
    grep

    egrep
        grep with Extended Regular Expression
        consume more resources

    fgrep
        fast grep

使用sed操作文件
# 输出系统中所有的用户
sed 's/:.*//' /etc/passwd | sort -u

# 替换cpp文件中的变量名字 (-i means "edit files in place ")
sed -i 's/oldname/newname/g' a.cpp

# 创建/home/jiangrui/tmp文件层级结构， 和/tmp目录结构一样
find /tmp/ -type d -print 2>/dev/null |
    sed 's;/tmp;/home/jiangrui/tmp;'|
    sed 's/^/mkdir /'|
    sh -x

& 表示匹配到的正则表达式
sed -i 's/test_val/&_new/g' a.cpp

# 匹配第几个
sed -i 's/test_val/&_new/' a.cpp
sed -i 's/test_val/&_new/3' a.cpp # 仅仅替换第三个匹配

# 多个匹配命令
sed -e 's/foo/bar/g' -e 's/chicken/cow/g' myfile.xml > myfile2.xml

cat replace.txt
    s/foo/bar/g'
    s/chicken/cow/g

sed -f replace.txt myfile.xml > myfile2.xml

Sed 的运作方式
    命令行的每个文件都会被依次读取
    没有文件会使用标准输入
    '-'表示标准输入
    
    sed每次读取文件中的一行，将读取到的行放到一个内存区域。该区域成为“模式空间”

sed -n '/<HTML>/p' *.html # -n表示默认不输出， p表示输出
                          # 表示仅仅输出包含<HTML>的行

sed匹配特定行
    /oldfunc/ s/$/# XXX: depreciated, use newfunc instead/
    /Tom/ s//& and Jerry/g
    /used/ !s/new/used/g    #将不包括used的行中的所有new替换为used
    
    sed -n '1,20p' foo.xml
    sed -n '/foo/,/bar/ s/baz/quazz/g' foo.xml # 从含有foo的行开始，到含有bar的行结束

取出文本中的列
cut -d : -f 6 /etc/passwd
cut -d : -f 1,5 /etc/passwd






