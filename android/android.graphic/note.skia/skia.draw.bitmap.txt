http://code.google.com/p/skia/
http://code.google.com/p/skia/wiki/GettingStartedOnLinux

http://blog.csdn.net/yili_xie/article/details/4803565

--------------------------------------------------------------------------------
application
--------------------------------------------------------------------------------
protected void onDraw(Canvas canvas) {

    // invalidate();

    long timeBefore = System.currentTimeMillis();
    System.out.println("before canvas.drawBitmap: " + timeBefore);

    // Debug.startMethodTracing();
    // Debug.startNativeTracing();
    canvas.drawBitmap(mMap, 0, 0, new Paint());
    // Debug.stopNativeTracing();
    // Debug.stopMethodTracing();

    long timeAfter = System.currentTimeMillis();
    System.out.println("after canvas.drawBitmap: " + timeAfter);
    System.out.println("canvas.drawBitmap duration: " + (timeAfter-timeBefore));

--------------------------------------------------------------------------------
framework
--------------------------------------------------------------------------------
base/graphics/java/android/graphics/Canvas.java
public void drawBitmap(Bitmap bitmap, float left, float top, Paint paint) 
    throwIfRecycled(bitmap);
    native_drawBitmap(mNativeCanvas, bitmap.ni(), left, top,
            paint != null ? paint.mNativePaint : 0, mDensity, mScreenDensity,
            bitmap.mDensity);
            |
            V
base/core/jni/android/graphics/Canvas.cpp
{"native_drawBitmap","(IIFFIIII)V",
    (void*) SkCanvasGlue::drawBitmap__BitmapFFPaint},
                |
                V
static void drawBitmap__BitmapFFPaint(JNIEnv* env, jobject jcanvas,
        SkCanvas* canvas, SkBitmap* bitmap,
        jfloat left, jfloat top,
        SkPaint* paint, jint canvasDensity,
        jint screenDensity, jint bitmapDensity)

    canvas->drawBitmap(*bitmap, 0, 0, &filteredPaint);
                |
                V
--------------------------------------------------------------------------------
skia
--------------------------------------------------------------------------------
01-01 03:42:55.831 I/System.out(  928): before canvas.drawBitmap: 1072928575840

01-01 03:42:55.831 I/SkCanvas(  928): external/skia/src/core/SkCanvas.cpp, drawBitmap, 1099
    void SkCanvas::drawBitmap(const SkBitmap& bitmap, 
            SkScalar x, SkScalar y, const SkPaint* paint) {
        this->internalDrawBitmap(bitmap, matrix, paint);
            |
            V
void SkCanvas::internalDrawBitmap(const SkBitmap& bitmap, 
        const SkMatrix& matrix, const SkPaint* paint) {
    this->commonDrawBitmap(bitmap, matrix, *paint);
            |
            V
void SkCanvas::commonDrawBitmap(const SkBitmap& bitmap, 
        const SkMatrix& matrix, const SkPaint& paint) {
    ITER_BEGIN(paint, SkDrawFilter::kBitmap_Type)
    while (iter.next()) {
    iter.fDevice->drawBitmap(iter, bitmap, matrix, paint);
    ITER_END
        |
        V
01-01 03:42:55.831 I/SkDevice(  928): external/skia/src/core/SkDevice.cpp, drawBitmap, 75
void SkDevice::drawBitmap(const SkDraw& draw, const SkBitmap& bitmap, 
        const SkMatrix& matrix, const SkPaint& paint) {
    draw.drawBitmap(bitmap, matrix, paint);
            |
            V
01-01 03:42:55.841 I/SkDraw  (  928): external/skia/src/core/SkDraw.cpp, drawBitmap, 1034
void SkDraw::drawBitmap(const SkBitmap& bitmap, 
        const SkMatrix& prematrix, const SkPaint& paint) const {

    ...
    if (bitmap.getConfig() != SkBitmap::kA8_Config 
            && just_translate(matrix, bitmap)) {
        SkBlitter*  blitter = SkBlitter::ChooseSprite(*fBitmap, 
                paint, bitmap, ix, iy, storage, sizeof(storage));

01-01 03:42:55.841 I/SkBlitter_Sprite(  928): external/skia/src/core/SkBlitter_Sprite.cpp, ChooseSprite, 89
01-01 03:42:55.841 I/SkBlitter_Sprite(  928): external/skia/src/core/SkBlitter_Sprite.cpp, ChooseSprite, 94
01-01 03:42:55.841 I/SkSpriteBlitter_RGB16(  928): external/skia/src/core/SkSpriteBlitter_RGB16.cpp, ChooseD16, 350
01-01 03:42:55.841 I/SkSpriteBlitter_RGB16(  928): external/skia/src/core/SkSpriteBlitter_RGB16.cpp, ChooseD16, 383
        // create a Sprite_D16_S16_Opaque
        case SkBitmap::kRGB_565_Config:
           if (255 == alpha) {
               LOGI("%s, %s, %d", __FILE__, __FUNCTION__, __LINE__);
               SK_PLACEMENT_NEW_ARGS(blitter, Sprite_D16_S16_Opaque,
                       storage, storageSize, (source));

01-01 03:42:55.841 I/SkDraw  (  928): external/skia/src/core/SkDraw.cpp, drawBitmap, 1089
    if (blitter) {
        for (; !iter.done(); iter.next()) {
            blitter->blitRect(cr.fLeft, cr.fTop, cr.width(), cr.height());
                |
                V
01-01 03:42:55.841 I/SkSpriteBlitter_RGB16(  928): external/skia/src/core/SkSpriteBlitter_RGB16.cpp, blitRect, 94
    // 画图的最终操作就是将内存中的数据拷贝到图形设备的buffer中去（framebuffer）
    class Sprite_D16_S16_Opaque : public SkSpriteBlitter {
       virtual void blitRect(int x, int y, int width, int height) {
           SK_RESTRICT uint16_t* dst = fDevice->getAddr16(x, y);
           const SK_RESTRICT uint16_t* src = fSource->getAddr16(x - fLeft,
                   y - fTop);
           unsigned dstRB = fDevice->rowBytes();
           unsigned srcRB = fSource->rowBytes();

           SkMSec now = get_thread_msec(); //SkTime::GetMSecs();

           // 从这儿看出图片是一行一行拷贝的
           while (--height >= 0) {
               memcpy(dst, src, width << 1);
               dst = (uint16_t*)((char*)dst + dstRB);
               src = (const uint16_t*)((const char*)src + srcRB);
           }
           LOGI("memory copy time %d ms\n", get_thread_msec() - now);




