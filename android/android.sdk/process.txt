
file:///home/jiangrui/android/backup/android-sdk/docs/guide/topics/fundamentals/processes-and-threads.html


Basically, all components of an application are arranged in a single process
    and run in a main thread(UI thread)

Arranging components into different processes
    <application>, <activity>, <service>, <receiver>, <provider>
        set android:process attribute to specify a process
            in which the component shoud run

    some components can share a process by this method
        the applications share the same Linux user ID and are signed with the same certificates


Process lifecycle
    kill processes with low priority and reclaim resources for new or more important processes
    less important, more important

    importance hierarchy
        the first process is most important and is killed last

        1. Foreground process
            It hosts an Activity that the user is interacting with (the Activity's onResume() method has been called).
            It hosts a Service that's bound to the activity that the user is interacting with.
            It hosts a Service that's running "in the foreground"â€”the service has called startForeground(). 
            It hosts a Service that's executing one of its lifecycle callbacks (onCreate(), onStart(), or onDestroy()).
            It hosts a BroadcastReceiver that's executing its onReceive() method.

        2. Visible process
            It hosts an Activity that is not in the foreground, but is still visible to the user (its onPause() method has been called). 
            for example, if the foreground activity started a dialog, which allows the previous activity to be seen behind it.

            It hosts a Service that's bound to a visible (or foreground) activity.

        3. Service process
            There is a running service which is started with the startService()

        4. Background process
            holding an activity that's not currently visible to the user
                onStop() method has been called

            visible state
                before being kill, an activity have a chance to save its visible state 
                    onSaveInstanceState(Bundle outState) 
                the state can be restore its visible after in onCreate()

        5.Empty process

        1. Foreground process
            Activity
                onResume()...onPause()
                onCreate(...)
                onStart(...)
                onDestroy(...)

            Service
                bound to foreground activity
                startForeground()...stopForeground()

            BroadcastReceiver
                onReceive(...)
                
        2. Visible process
            Activity
                onPause()...onStop()

            Service
                bound to a visible activity

        3. Service process
        4. Background process
            onStop()...
        5.Empty process

        good practices
            1. A service process has higher priority than a background activity process
                better put time-consuming works in a service than a thread

                same reason that broadcast receivers should employ services rather than 
                    simply put time-consuming operations in a thread.

                The background activity may be killed

    Threads
        main thread: UI thread
            view, desktop widget, 
            All components of an application run in the main thread of its application by default

            Additionally, the Andoid UI toolkit is not thread-safe. 
                MUST NOT manipulate your UI from a worker thread

            two rules for the UI thread
               1. Do not block the UI thread
               2. Do not access the Android UI toolkit from outside the UI thread 

    Worker threads

        public void onClick(View v) {
            new Thread(new Runnable() {
                public void run() {
                    Bitmap b = loadImageFromNetwork(
                        "http://example.com/image.png");
                    mImageView.setImageBitmap(b);   // WRONG!!! Access the UI toolkit in a worker thread
                }
            }).start();
        }

    Android offers several ways to access the UI thread from other threads
        * Activity.runOnUiThread(Runnable)
        * View.post(Runnable)
        * View.postDelayed(Runnable, long)

        public void onClick(View v) {
            new Thread(new Runnable() {
                public void run() {
                    final Bitmap bitmap = loadImageFromNetwork(
                        "http://example.com/image.png");
                    mImageView.post(new Runnable() {
                        public void run() {
                            mImageView.setImageBitmap(bitmap);
                        }
                    });
                }
            }).start();
        }

        Perhaps the best solution,
            extend the AsyncTask class

    Using AsyncTask
        performs the blocking operations in a worker thread
        then publishes the results on the UI thread

        without requiring you to handle threads and/or handlers yourself

        1. subclass AsyncTask

        2. implement the doInBackground() callback method
            do blocking works

        3. implement onPostExecute()
            delivers the result from doInBackground() 
            and runs in the UI thread

        4. then run the task by calling execute() from the UI thread

            public void onClick(View v) {
                new DownloadImageTask().execute("http://example.com/image.png");
            }

            private class DownloadImageTask extends AsyncTask<String, Void, Bitmap> {
                /** The system calls this to perform work in a worker thread and
                  * delivers it the parameters given to AsyncTask.execute() */
                protected Bitmap doInBackground(String... urls) {
                    return loadImageFromNetwork(urls[0]);
                }
                
                /** The system calls this to perform work in the UI thread and delivers
                  * the result from doInBackground() */
                protected void onPostExecute(Bitmap result) {
                    mImageView.setImageBitmap(result);
                }
            }

        a runtime configuration change (such as when the user changes the screen orientation)
            will restart your activity
            which may destroy your worker thread 
                see the source code for the Shelves sample application

    Thread-safe methods
        IBinder method
            MUST be implemented to be thread-safe

            called in the same process
                executed in the caller's thread

            called from another process
                select a thread from a pool of threads in the service process
                NOT executed in the UI thread of the service process

        Content provider 
            query(), insert(), delete(), update(), and getType()
                called from a pool of threads in the content provider's process
                    NOT in the UI thread 

                MUST be implemented to be thread-safe

    Interprocess Communication
        using remote procedure calls (RPCs)
            a method is called by an activity or other application component, 
                executed remotely (in another process)

                with any result returned back to the caller


            From the user's perspective, the application appears to hang.

