第4章 测试

烈火验真金，逆境磨意志 卢修斯-塞尼加

编写单元测试是一种验证行为，也是一种设计行为，还是一种文档行为
避免了功能验证方面的反馈循环

原则：
    让测试尽可能的自动化, 程序化
    为自动化测试考虑系统架构，模块结构，程序结构
    测试用例尽早完成, 测试程序尽早写

    频繁的运行测试程序

4.1 测试驱动的开发方法
    在设计程序前设计好测试方案

    编写单元测试可以使程序员
        从使用者，调用者的角度思考
        关注程序的接口

    可测试性
        把程序设计成易于调用和可测试的
        程序必须和周边环境解耦

    文档作用
        想知道如何调用一个接口，打开一个测试case看看就行
        
    测试边界
        划分好程序的边界

        如UI/Service/--->Server
            UI需要从service中获取数据，
              确定UI和service之间的接口
              自动化测试时，可以写一个MockServcie提供假的数据

            Service从Server获取数据
              确定Service和Server之间的接口
              自动化测试时，可以写一个MockNetworkUtil提供假的数据

4.2 验收测试
    单元测试是必要条件，但不充分
    单元测试能够验证系统中小的组成单元应该按照所期望的方式工作

    还需要集成测试和系统测试
    单元测试是white-box tests, 验收测试是black-box tests

    验收测试是不了解系统内部机制的人编写的
    验收测试是程序，如自动化脚本等等
    验收测试一个feature的最终文档
        程序员可通过验收测试来了解系统的的特性
    
    编写验收测试对于系统的架构具有深远的意义

    为了时系统可以被测试，需要在很高的系统架构层面对系统进行解耦
        如为了使系统不通过用户界面，就能够对业务规则进行访问
            就必须对用户界面和业务规则进行解耦
        
    实践时可以对一个一个的迭代来编写验收测试

    对于Android来说，需要不使用ui对业务逻辑进行完整的测试



