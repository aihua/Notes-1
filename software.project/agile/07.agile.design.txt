
设计原则：
    单一职责原则
    开放封闭原则
    Liskov替换原则
    依赖倒置原则
    接口隔离原则


源代码就是设计

臭味
    僵化性：难以改动，单个改动会导致许多其他部分的变化
        单一的改动会导致依赖的模块的连锁改动。
        比如模块A, B, C依赖与D的内部实现，如果D内部发生改动，ABC可能都要变动。


    脆弱性：改动会导致许多概念上无关的模块发生错误
    牢固性：无法抽取公共部分，被其他模块重用

    粘滞性：做正确的事情比做错误的事情要困难
        比如一个问题需要修改，在framework中和浏览器中都可修改。framework中修改比较合理。
        但是修改framework的流程非常复杂，而浏览器的流程比较简单。那么工程师就容易选择
        修改浏览器。
        

    不必要的复杂性：设计中包括了没有任何直接好处的基础结构
    不必要的重复性：包括重复的结构
    晦涩性：难以阅读，理解

当需求改变时，应该抓住这次机会改进设计。以便设计对将来同样的变化具有弹性。
而不是为原来的设计打补丁

应该遵循开放-封闭原则，对扩展开放，对修改关闭。


尽量保持好的设计
    每天，每时每刻都要让软件尽可能的干净，简单。
    不能说“我明天在来做这件事情”
    不能容忍代码的腐化
  

敏捷设计
    是一个过程
    一个持续的应用原则，模式以及实践来改进软件结构和可读性的过程
    致力于保持系统设计在任何时间都尽可能的简单，干净和富有表现力

    原则和模式实在一次次的迭代中被应用的
    并不是一次性就设计好的







