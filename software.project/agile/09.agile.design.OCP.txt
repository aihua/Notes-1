开放-封闭原则 OCP
    软件实体（类，模块，函数）应该是可以被扩展的，但是不可被修改。

    依赖于抽象，而不是具体实现

    尽量的让更多的代码不可修改
       肯定会有一些代码必须发生变化，尽可能地让这些代码集中，和其他模块隔离，并可配置。
       当变化发生时，最高的境界就是不用修改代码。可以修改配置。
   
   代码对变化封闭

    先猜测哪些模块会发生变化，然后构造抽象来封装这些变化

什么时候开始抽象

    变化第一次发生时
        最开始写代码时，假设变化不会发生

        但是变化第一次发生时，就应该修改代码，创建抽象来隔离变化。
            保证如果以后再次发生相同类型的修改，模块能够满足OCP原则。
            能够通过扩展，而不是修改来满足类似的需求变化。

   让变化尽早发生
      地一颗子弹来的越早，对我们越有利
         首先写测试代码。测试代码描绘了使用系统的方法。通过让代码具有可测试性来获取好的抽象。
         使用短的迭代周期，几天而不是几周
         首先开发最重要的特性
         尽早地，尽快地，经常性地发布软件。经常将迭代后的产品展示给涉众
        
