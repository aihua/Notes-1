<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0089)http://android.git.kernel.org/?p=platform/build.git;a=blob_plain;f=core/build-system.html -->
<HTML 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Android Build System</TITLE><!--
  A lot of people read this document template.  Please keep it clean:

   - keep the document xhtml-compliant, as many people use validating editors
   - check your edits for typos, spelling errors, and questionable grammar
   - prefer css styles to formatting tags like <font>, <tt>, etc.
   - keep it human-readable and human-editable in a plain text editor:
     - strive to keep lines wrapped at 80 columns, unless a link prevents it
     - use plenty of whitespace
     - try to pretty-format (wrt nesting and indenting) any hairy html
   - check your inline javascript for errors using the javascript console
   
  Your readers will be very appreciative.
-->
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1"><LINK 
href="../android.css" type=text/css rel=stylesheet><!-- commenting out so the xhtml validator doesn't whine about < and &&;
     the browser should still find the script tag. -->
<SCRIPT language=JavaScript1.2 type=text/javascript>
<!--
function highlight(name) {
  if (document.getElementsByTagName) {
    tags              = [ 'span', 'div', 'tr', 'td' ];
    for (i in tags) {
      elements        = document.getElementsByTagName(tags[i]);
      if (elements) {
        for (j = 0; j < elements.length; j++) {
          elementName = elements[j].getAttribute("class");
          if (elementName == name) {
            elements[j].style.backgroundColor = "#C0F0C0";
          } else if (elementName && elementName.indexOf("rev") == 0) {
            elements[j].style.backgroundColor = "#FFFFFF";
          }
        }
      }
    }
  }
}
//-->
  </SCRIPT>
<!-- this style sheet is for the style of the toc --><LINK href="toc.css" 
type=text/css rel=stylesheet>
<STYLE type=text/css>.warning {
	BORDER-RIGHT: red 1px solid; PADDING-RIGHT: 8px; BORDER-TOP: red 1px solid; PADDING-LEFT: 8px; PADDING-BOTTOM: 8px; BORDER-LEFT: red 1px solid; COLOR: red; PADDING-TOP: 8px; BORDER-BOTTOM: red 1px solid
}
PRE.prettyprint {
	MARGIN-TOP: 0px
}
LI {
	MARGIN-TOP: 8px
}
</STYLE>

<META content="MSHTML 6.00.2900.3562" name=GENERATOR></HEAD>
<BODY onload=prettyPrint()>
<H1><A name=My_Project_>Android Build System</H1><!-- Status is one of: Draft, Current, Needs Update, Obsolete -->
<P style="TEXT-ALIGN: center"><STRONG>Status:</STRONG> <EM>Draft </EM>&nbsp; 
<SMALL>(as of May 18, 2006)</SMALL> </P>
<P><B>Contents</B></P><!-- this div expands out to a list of contents based on the H2 and H3 headings.
Believe it! -->
<DIV class=nav-2-levels id=nav></DIV>
<H2>Objective</H2>
<P>The primary goals of reworking the build system are (1) to make dependencies 
work more reliably, so that when files need to rebuilt, they are, and (2) to 
improve performance of the build system so that unnecessary modules are not 
rebuilt, and so doing a top-level build when little or nothing needs to be done 
for a build takes as little time as possible.</P>
<H2>Principles and Use Cases and Policy</H2>
<P>Given the above objective, these are the overall principles and use cases 
that we will support. This is not an exhaustive list.</P>
<H3>Multiple Targets</H3>
<P>It needs to be possible to build the Android platform for multiple targets. 
This means:</P>
<UL>
  <LI>The build system will support building tools for the host platform, both 
  ones that are used in the build process itself, and developer tools like the 
  simulator. 
  <LI>The build system will need to be able to build tools on Linux (definitely 
  Goobuntu and maybe Grhat), MacOS, and to some degree on Windows. 
  <LI>The build system will need to be able to build the OS on Linux, and in the 
  short-term, MacOS. Note that this is a conscious decision to stop building the 
  OS on Windows. We are going to rely on the emulator there and not attempt to 
  use the simulator. This is a requirement change now that the emulator story is 
  looking brighter. </LI></UL>
<H3>Non-Recursive Make</H3>
<P>To achieve the objectives, the build system will be rewritten to use make 
non-recursively. For more background on this, read <A 
href="http://aegis.sourceforge.net/auug97.pdf">Recursive Make Considered 
Harmful</A>. For those that don't want PDF, here is the <A 
href="http://72.14.203.104/search?q=cache:HwuX7YF2uBIJ:aegis.sourceforge.net/auug97.pdf&amp;hl=en&amp;gl=us&amp;ct=clnk&amp;cd=2&amp;client=firefox">Google 
translated version</A>. 
<H3>Rapid Compile-Test Cycles</H3>
<P>When developing a component, for example a C++ shared library, it must be 
possible to easily rebuild just that component, and not have to wait more than a 
couple seconds for dependency checks, and not have to wait for unneeded 
components to be built.</P>
<H3>Both Environment and Config File Based Settings</H3>
<P>To set the target, and other options, some people on the team like to have a 
configuration file in a directory so they do not have an environment setup 
script to run, and others want an environment setup script to run so they can 
run builds in different terminals on the same tree, or switch back and forth in 
one terminal. We will support both.</P>
<H3>Object File Directory / make clean</H3>
<P>Object files and other intermediate files will be generated into a directory 
that is separate from the source tree. The goal is to have make clean be "rm -rf 
<OBJ>" in the tree root directory. The primary goals of this are to simplify 
searching the source tree, and to make "make clean" more reliable.</P>
<H3>SDK</H3>
<P>The SDK will be a tarball that will allow non-OS-developers to write apps. 
The apps will actually be built by first building the SDK, and then building the 
apps against that SDK. This will hopefully (1) make writing apps easier for us, 
because we won't have to rebuild the OS as much, and we can use the standard 
java-app development tools, and (2) allow us to dog-food the SDK, to help ensure 
its quality. Cedric has suggested (and I agree) that apps built from the SDK 
should be built with ant. Stay tuned for more details as we figure out exactly 
how this will work.</P>
<H3>Dependecies</H3>
<P>Dependencies should all be automatic. Unless there is a custom tool involved 
(e.g. the webkit has several), the dependencies for shared and static libraries, 
.c, .cpp, .h, .java, java libraries, etc., should all work without intervention 
in the Android.mk file.</P>
<H3>Hiding command lines</H3>
<P>The default of the build system will be to hide the command lines being 
executed for make steps. It will be possible to override this by specifying the 
showcommands pseudo-target, and possibly by setting an environment variable.</P>
<H3>Wildcard source files</H3>
<P>Wildcarding source file will be discouraged. It may be useful in some 
scenarios. The default <CODE>$(wildcard *)</CODE> will not work due to the 
current directory being set to the root of the build tree.
<P>
<H3>Multiple targets in one directory</H3>
<P>It will be possible to generate more than one target from a given 
subdirectory. For example, libutils generates a shared library for the target 
and a static library for the host.</P>
<H3>Makefile fragments for modules</H3>
<P><B>Android.mk</B> is the standard name for the makefile fragments that 
control the building of a given module. Only the top directory should have a 
file named "Makefile".</P>
<H3>Use shared libraries</H3>
<P>Currently, the simulator is not built to use shared libraries. This should be 
fixed, and now is a good time to do it. This implies getting shared libraries to 
work on Mac OS.</P>
<H2>Nice to Have</H2>
<P>These things would be nice to have, and this is a good place to record them, 
however these are not promises.</P>
<H3>Simultaneous Builds</H3>
<P>The hope is to be able to do two builds for different combos in the same tree 
at the same time, but this is a stretch goal, not a requirement. Doing two 
builds in the same tree, not at the same time must work. (update: it's looking 
like we'll get the two builds at the same time working)</P>
<H3>Deleting headers (or other dependecies)</H3>
<P>Problems can arise if you delete a header file that is referenced in ".d" 
files. The easy way to deal with this is "make clean". There should be a better 
way to handle it. (from fadden)</P>
<P>One way of solving this is introducing a dependency on the directory. The 
problem is that this can create extra dependecies and slow down the build. It's 
a tradeoff.</P>
<H3>Multiple builds</H3>
<P>General way to perform builds across the set of known platforms. This would 
make it easy to perform multiple platform builds when testing a change, and 
allow a wide-scale "make clean". Right now the buildspec.mk or environment 
variables need to be updated before each build. (from fadden)</P>
<H3>Aftermarket Locales and Carrier</H3>
<P>We will eventually need to add support for creating locales and carrier 
customizations to the SDK, but that will not be addressed right now.</P>
<H2><A id=usage>Usage</H2>
<P>You've read (or scrolled past) all of the motivations for this build system, 
and you want to know how to use it. This is the place.</P>
<H3>Your first build</H3>
<P>The <A href="http://android.git.kernel.org/building.html">Building</A> 
document describes how do do builds.</P>
<H3>build/envsetup.sh functions</H3>If you source the file build/envsetup.sh 
into your bash environment, <CODE>. build/envsetup.sh</CODE>you'll get a few 
helpful shell functions: 
<UL>
  <LI><B>printconfig</B> - Prints the current configuration as set by the lunch 
  and choosecombo commands. 
  <LI><B>m</B> - Runs <CODE>make</CODE> from the top of the tree. This is useful 
  because you can run make from within subdirectories. If you have the 
  <CODE>TOP</CODE> environment variable set, it uses that. If you don't, it 
  looks up the tree from the current directory, trying to find the top of the 
  tree. 
  <LI><B>croot</B> - <CODE>cd</CODE> to the top of the tree. 
  <LI><B>sgrep</B> - grep for the regex you provide in all .c, .cpp, .h, .java, 
  and .xml files below the current directory. </LI></UL>
<H3>Build flavors/types</H3>
<P>When building for a particular product, it's often useful to have minor 
variations on what is ultimately the final release build. These are the 
currently-defined "flavors" or "types" (we need to settle on a real name for 
these). </P>
<TABLE border=1>
  <TBODY>
  <TR>
    <TD><CODE>eng<CODE> </CODE></CODE></TD>
    <TD>This is the default flavor. A plain "<CODE>make</CODE>" is the same as 
      "<CODE>make eng</CODE>". <CODE>droid</CODE> is an alias for 
      <CODE>eng</CODE>. 
      <UL>
        <LI>Installs modules tagged with: <CODE>eng</CODE>, <CODE>debug</CODE>, 
        <CODE>user</CODE>, and/or <CODE>development</CODE>. 
        <LI>Installs non-APK modules that have no tags specified. 
        <LI>Installs APKs according to the product definition files, in addition 
        to tagged APKs. 
        <LI><CODE>ro.secure=0</CODE> 
        <LI><CODE>ro.debuggable=1</CODE> 
        <LI><CODE>ro.kernel.android.checkjni=1</CODE> 
        <LI><CODE>adb</CODE> is enabled by default. </LI></UL></TD></TR>
  <TR>
    <TD><CODE>user<CODE> </CODE></CODE></TD>
    <TD>"<CODE>make user</CODE>" 
      <P>This is the flavor intended to be the final release bits. 
      <UL>
        <LI>Installs modules tagged with <CODE>user</CODE>. 
        <LI>Installs non-APK modules that have no tags specified. 
        <LI>Installs APKs according to the product definition files; tags are 
        ignored for APK modules. 
        <LI><CODE>ro.secure=1</CODE> 
        <LI><CODE>ro.debuggable=0</CODE> 
        <LI><CODE>adb</CODE> is disabled by default. </LI></UL></TD></TR>
  <TR>
    <TD><CODE>userdebug<CODE> </CODE></CODE></TD>
    <TD>"<CODE>make userdebug</CODE>" 
      <P>The same as <CODE>user</CODE>, except: 
      <UL>
        <LI>Also installs modules tagged with <CODE>debug</CODE>. 
        <LI><CODE>ro.debuggable=1</CODE> 
        <LI><CODE>adb</CODE> is enabled by default. </LI></UL></TD></TR></TBODY></TABLE>
<P>If you build one flavor and then want to build another, you should run 
"<CODE>make installclean</CODE>" between the two makes to guarantee that you 
don't pick up files installed by the previous flavor. "<CODE>make clean</CODE>" 
will also suffice, but it takes a lot longer. </P>
<H3>More pseudotargets</H3>
<P>Sometimes you want to just build one thing. The following pseudotargets are 
there for your convenience:</P>
<UL>
  <LI><B>droid</B> - <CODE>make droid</CODE> is the normal build. This target is 
  here because the default target has to have a name. 
  <LI><B>all</B> - <CODE>make all</CODE> builds everything <CODE>make 
  droid</CODE> does, plus everything whose <CODE>LOCAL_MODULE_TAGS</CODE> do not 
  include the "droid" tag. The build server runs this to make sure that 
  everything that is in the tree and has an Android.mk builds. 
  <LI><B>clean-$(LOCAL_MODULE)</B> and <B>clean-$(LOCAL_PACKAGE_NAME)</B> - Let 
  you selectively clean one target. For example, you can type <CODE>make 
  clean-libutils</CODE> and it will delete libutils.so and all of the 
  intermediate files, or you can type <CODE>make clean-Home</CODE> and it will 
  clean just the Home app. 
  <LI><B>clean</B> - <CODE>make clean</CODE> deletes all of the output and 
  intermediate files for this configuration. This is the same as <CODE>rm -rf 
  out/&lt;configuration&gt;/</CODE> 
  <LI><B>clobber</B> - <CODE>make clobber</CODE> deletes all of the output and 
  intermediate files for all configurations. This is the same as <CODE>rm -rf 
  out/</CODE>. 
  <LI><B>dataclean</B> - <CODE>make dataclean</CODE> deletes contents of the 
  data directory inside the current combo directory. This is especially useful 
  on the simulator and emulator, where the persistent data remains present 
  between builds. 
  <LI><B>showcommands</B> - <CODE>showcommands</CODE> is a modifier target which 
  causes the build system to show the actual command lines for the build steps, 
  instead of the brief descriptions. Most people don't like seeing the actual 
  commands, because they're quite long and hard to read, but if you need to for 
  debugging purposes, you can add <CODE>showcommands</CODE> to the list of 
  targets you build. For example <CODE>make showcommands</CODE> will build the 
  default android configuration, and <CODE>make runtime showcommands</CODE> will 
  build just the runtime, and targets that it depends on, while displaying the 
  full command lines. Please note that there are a couple places where the 
  commands aren't shown here. These are considered bugs, and should be fixed, 
  but they're often hard to track down. Please let <A 
  href="mailto:android-build-team">android-build-team</A> know if you find any. 
  <LI><B>LOCAL_MODULE</B> - Anything you specify as a <CODE>LOCAL_MODULE</CODE> 
  in an Android.mk is made into a pseudotarget. For example, <CODE>make 
  runtime</CODE> might be shorthand for <CODE>make 
  out/linux-x86-debug/system/bin/runtime</CODE> (which would work), and 
  <CODE>make libkjs</CODE> might be shorthand for <CODE>make 
  out/linux-x86-debug/system/lib/libkjs.so</CODE> (which would also work). 
  <LI><B>targets</B> - <CODE>make targets</CODE> will print a list of all of the 
  LOCAL_MODULE names you can make. </LI></UL>
<H3><A name=templates>How to add another component to the build - Android.mk 
templates</H3>
<P>You have a new library, a new app, or a new executable. For each of the 
common types of modules, there is a corresponding file in the templates 
directory. It will usually be enough to copy one of these, and fill in your own 
values. Some of the more esoteric values are not included in the templates, but 
are instead just documented here, as is the documentation on using custom tools 
to generate files.</P>
<P>Mostly, you can just look for the TODO comments in the templates and do what 
it says. Please remember to delete the TODO comments when you're done to keep 
the files clean. The templates have minimal documentation in them, because 
they're going to be copied, and when that gets stale, the copies just won't get 
updated. So read on...</P>
<H4>Apps</H4>
<P>Use the <CODE>templates/apps</CODE> file.</P>
<P>This template is pretty self-explanitory. See the variables below for more 
details.</P>
<H4>Java Libraries</H4>
<P>Use the <CODE>templates/java_library</CODE> file.</P>
<P>The interesting thing here is the value of LOCAL_MODULE, which becomes the 
name of the jar file. (Actually right now, we're not making jar files yet, just 
directories of .class files, but the directory is named according to what you 
put in LOCAL_MODULE). This name will be what goes in the LOCAL_JAVA_LIBRARIES 
variable in modules that depend on your java library.</P>
<H4>C/C++ Executables</H4>
<P>Use the <CODE>templates/executable</CODE> file, or the 
<CODE>templates/executable_host</CODE> file.</P>
<P>This template has a couple extra options that you usually don't need. Please 
delete the ones you don't need, and remove the TODO comments. It makes the rest 
of them easier to read, and you can always refer back to the templates if you 
need them again later.</P>
<P>By default, on the target these are built into /system/bin, and on the host, 
they're built into <COMBO>/host/bin. These can be overridden by setting 
<CODE>LOCAL_MODULE_PATH</CODE>. See <A 
href="http://android.git.kernel.org/?p=platform/build.git;a=blob_plain;f=core/build-system.html#moving-targets">Putting 
targets elsewhere</A> for more.</P>
<H4>Shared Libraries</H4>
<P>Use the <CODE>templates/shared_library</CODE> file, or the 
<CODE>templates/shared_library_host</CODE> file.</P>
<P>Remember that on the target, we use shared libraries, and on the host, we use 
static libraries, since executable size isn't as big an issue, and it simplifies 
distribution in the SDK.</P>
<H4>Static Libraries</H4>
<P>Use the <CODE>templates/static_library</CODE> file, or the 
<CODE>templates/static_library_host</CODE> file.</P>
<P>Remember that on the target, we use shared libraries, and on the host, we use 
static libraries, since executable size isn't as big an issue, and it simplifies 
distribution in the SDK.</P>
<H4><A name=custom-tools>Using Custom Tools</H4>
<P>If you have a tool that generates source files for you, it's possible to have 
the build system get the dependencies correct for it. Here are a couple of 
examples. <CODE>$@</CODE> is the make built-in variable for "the current 
target." The <FONT color=red>red</FONT> parts are the parts you'll need to 
change.</P>
<P>You need to put this after you have declared <CODE>LOCAL_PATH</CODE> and 
<CODE>LOCAL_MODULE</CODE>, because the <CODE>$(local-intermediates-dir)</CODE> 
and <CODE>$(local-host-intermediates-dir)</CODE> macros use these variables to 
determine where to put the files. 
<H5>Example 1</H5>
<P>Here, there is one generated file, called chartables.c, which doesn't depend 
on anything. And is built by the tool built to $(HOST_OUT_EXECUTABLES)/dftables. 
Note on the second to last line that a dependency is created on the tool.</P><PRE>intermediates:= $(local-intermediates-dir)
GEN := $(intermediates)/<FONT color=red>chartables.c</FONT>
$(GEN): PRIVATE_CUSTOM_TOOL = <FONT color=red>$(HOST_OUT_EXECUTABLES)/dftables $@</FONT>
$(GEN): <FONT color=red>$(HOST_OUT_EXECUTABLES)/dftables</FONT>
	$(transform-generated-source)
LOCAL_GENERATED_SOURCES += $(GEN)
</PRE>
<H5>Example 2</H5>
<P>Here as a hypothetical example, we use use cat as if it were to transform a 
file. Pretend that it does something useful. Note how we use a target-specific 
variable called PRIVATE_INPUT_FILE to store the name of the input file.</P><PRE>intermediates:= $(local-intermediates-dir)
GEN := $(intermediates)/<FONT color=red>file.c</FONT>
$(GEN): PRIVATE_INPUT_FILE := $(LOCAL_PATH)/<FONT color=red>input.file</FONT>
$(GEN): PRIVATE_CUSTOM_TOOL = <FONT color=red>cat $(PRIVATE_INPUT_FILE) &gt; $@</FONT>
$(GEN): <FONT color=red>$(LOCAL_PATH)/file.c</FONT>
	$(transform-generated-source)
LOCAL_GENERATED_SOURCES += $(GEN)
</PRE>
<H5>Example 3</H5>
<P>If you have several files that are all similar in name, and use the same 
tool, you can combine them. (here the *.lut.h files are the generated ones, and 
the *.cpp files are the input files)</P><PRE>intermediates:= $(local-intermediates-dir)
GEN := $(addprefix $(intermediates)<FONT color=red>/kjs/, \
            array_object.lut.h \
            bool_object.lut.h \</FONT>
        )
$(GEN): PRIVATE_CUSTOM_TOOL = <FONT color=red>perl libs/WebKitLib/WebKit/JavaScriptCore/kjs/create_hash_table $&lt; -i &gt; $@</FONT>
$(GEN): $(intermediates)/<FONT color=red>%.lut.h</FONT> : $(LOCAL_PATH)/<FONT color=red>%.cpp</FONT>
	$(transform-generated-source)
LOCAL_GENERATED_SOURCES += $(GEN)
</PRE>
<H3><A name=platform-specific>Platform specific conditionals</H3>
<P>Sometimes you need to set flags specifically for different platforms. Here is 
a list of which values the different build-system defined variables will be set 
to and some examples.</P>
<P>For a device build, <CODE>TARGET_OS</CODE> is <CODE>linux</CODE> (we're using 
linux!), and <CODE>TARGET_ARCH</CODE> is <CODE>arm</CODE>.</P>
<P>For a simulator build, <CODE>TARGET_OS</CODE> and <CODE>TARGET_ARCH</CODE> 
are set to the same as <CODE>HOST_OS</CODE> and <CODE>HOST_ARCH</CODE> are on 
your platform. <CODE>TARGET_PRODUCT</CODE> is the name of the target 
hardware/product you are building for. The value <CODE>sim</CODE> is used for 
the simulator. We haven't thought through the full extent of customization that 
will happen here, but likely there will be additional UI configurations 
specified here as well.</P>
<TABLE cellSpacing=25>
  <TBODY>
  <TR>
    <TD vAlign=top align=middle><B>HOST_OS</B><BR>linux<BR>darwin<BR>(cygwin) 
    </TD>
    <TD vAlign=top align=middle><B>HOST_ARCH</B><BR>x86 </TD>
    <TD vAlign=top align=middle><B>HOST_BUILD_TYPE</B><BR>release<BR>debug 
  </TD></TR>
  <TR>
    <TD vAlign=top 
      align=middle><B>TARGET_OS</B><BR>linux<BR>darwin<BR>(cygwin) </TD>
    <TD vAlign=top align=middle><B>TARGET_ARCH</B><BR>arm<BR>x86 </TD>
    <TD vAlign=top align=middle><B>TARGET_BUILD_TYPE</B><BR>release<BR>debug 
    </TD>
    <TD vAlign=top 
      align=middle><B>TARGET_PRODUCT</B><BR>sim<BR>dream<BR>sooner 
</TD></TR></TBODY></TABLE>
<H4>TARGET_SIMULATOR</H4>
<P>If we're building the simulator, as opposed to the arm or emulator builds, 
<CODE>TARGET_SIMULATOR</CODE> will be set to <CODE>true</CODE>. 
<H4>Some Examples</H4><PRE>ifeq ($(TARGET_SIMULATOR),true)
LOCAL_CFLAGS += -DSIMULATOR
endif

ifeq ($(TARGET_BUILD_TYPE),release)
LOCAL_CFLAGS += -DNDEBUG=1
endif

# from libutils
ifeq ($(TARGET_OS),linux)
# Use the futex based mutex and condition variable
# implementation from android-arm because it's shared mem safe
LOCAL_SRC_FILES += futex_synchro.c
LOCAL_LDLIBS += -lrt -ldl
endif

</PRE>
<H3><A name=moving-modules>Putting modules elsewhere</H3>
<P>If you have modules that normally go somewhere, and you need to have them 
build somewhere else, read this. One use of this is putting files on the root 
filesystem instead of where they normally go in /system. Add these lines to your 
Android.mk:</P><PRE>LOCAL_MODULE_PATH := $(TARGET_ROOT_OUT_SBIN)
LOCAL_UNSTRIPPED_PATH := $(TARGET_ROOT_OUT_SBIN_UNSTRIPPED)
</PRE>
<P>For executables and libraries, you need to also specify a 
<CODE>LOCAL_UNSTRIPPED_PATH</CODE> location, because on target builds, we keep 
the unstripped executables so GDB can find the symbols.</CODE> 
<P>Look in <CODE>config/envsetup.make</CODE> for all of the variables defining 
places to build things.</P>
<P>FYI: If you're installing an executable to /sbin, you probably also want to 
set <CODE>LOCAL_FORCE_STATIC_EXCUTABLE := true</CODE> in your Android.mk, which 
will force the linker to only accept static libraries.</P>
<H3>Android.mk variables</H3>
<P>These are the variables that you'll commonly see in Android.mk files, listed 
alphabetically.</P>
<P>But first, a note on variable naming: 
<UL>
  <LI><B>LOCAL_</B> - These variables are set per-module. They are cleared by 
  the <CODE>include $(CLEAR_VARS)</CODE> line, so you can rely on them being 
  empty after including that file. Most of the variables you'll use in most 
  modules are LOCAL_ variables. 
  <LI><B>PRIVATE_</B> - These variables are make-target-specific variables. That 
  means they're only usable within the commands for that module. It also means 
  that they're unlikely to change behind your back from modules that are 
  included after yours. This <A 
  href="http://www.gnu.org/software/make/manual/make.html#Target_002dspecific">link 
  to the make documentation</A> describes more about target-specific variables. 
  Please note that there are a couple of these laying around the tree that 
  aren't prefixed with PRIVATE_. It is safe, and they will be fixed as they are 
  discovered. Sorry for the confusion. 
  <LI><B>INTERNAL_</B> - These variables are critical to functioning of the 
  build system, so you shouldn't create variables named like this, and you 
  probably shouldn't be messing with these variables in your makefiles. 
  <LI><B>HOST_</B> and <B>TARGET_</B> - These contain the directories and 
  definitions that are specific to either the host or the target builds. Do not 
  set variables that start with HOST_ or TARGET_ in your makefiles. 
  <LI><B>BUILD_</B> and <B>CLEAR_VARS</B> - These contain the names of 
  well-defined template makefiles to include. Some examples are CLEAR_VARS and 
  BUILD_HOST_PACKAGE. 
  <LI>Any other name is fair-game for you to use in your Android.mk. However, 
  remember that this is a non-recursive build system, so it is possible that 
  your variable will be changed by another Android.mk included later, and be 
  different when the commands for your rule / module are executed. </LI></UL>
<P></P>
<H4>LOCAL_ASSET_FILES</H4>
<P>In Android.mk files that <CODE>include $(BUILD_PACKAGE)</CODE> set this to 
the set of files you want built into your app. Usually:</P>
<P><CODE>LOCAL_ASSET_FILES += $(call find-subdir-assets)</CODE></P>
<P>This will probably change when we switch to ant for the apps' build 
system.</P>
<H4>LOCAL_CC</H4>
<P>If you want to use a different C compiler for this module, set LOCAL_CC to 
the path to the compiler. If LOCAL_CC is blank, the appropriate default compiler 
is used.</P>
<H4>LOCAL_CXX</H4>
<P>If you want to use a different C++ compiler for this module, set LOCAL_CXX to 
the path to the compiler. If LOCAL_CXX is blank, the appropriate default 
compiler is used.</P>
<H4>LOCAL_CFLAGS</H4>
<P>If you have additional flags to pass into the C or C++ compiler, add them 
here. For example:</P>
<P><CODE>LOCAL_CFLAGS += -DLIBUTILS_NATIVE=1</CODE></P>
<H4>LOCAL_CPPFLAGS</H4>
<P>If you have additional flags to pass into <I>only</I> the C++ compiler, add 
them here. For example:</P>
<P><CODE>LOCAL_CPPFLAGS += 
-ffriend-injection</CODE></P><CODE>LOCAL_CPPFLAGS</CODE> is guaranteed to be 
after <CODE>LOCAL_CFLAGS</CODE> on the compile line, so you can use it to 
override flags listed in <CODE>LOCAL_CFLAGS</CODE>. 
<H4>LOCAL_CPP_EXTENSION</H4>
<P>If your C++ files end in something other than "<CODE>.cpp</CODE>", you can 
specify the custom extension here. For example:</P>
<P><CODE>LOCAL_CPP_EXTENSION := .cc</CODE></P>Note that all C++ files for a 
given module must have the same extension; it is not currently possible to mix 
different extensions. 
<H4>LOCAL_NO_DEFAULT_COMPILER_FLAGS</H4>
<P>Normally, the compile line for C and C++ files includes global include paths 
and global cflags. If <CODE>LOCAL_NO_DEFAULT_COMPILER_FLAGS</CODE> is non-empty, 
none of the default includes or flags will be used when compiling C and C++ 
files in this module. <CODE>LOCAL_C_INCLUDES</CODE>, <CODE>LOCAL_CFLAGS</CODE>, 
and <CODE>LOCAL_CPPFLAGS</CODE> will still be used in this case, as will any 
<CODE>DEBUG_CFLAGS</CODE> that are defined for the module. 
<H4>LOCAL_COPY_HEADERS</H4>
<P class=warning>This will be going away.</P>
<P>The set of files to copy to the install include tree. You must also supply 
<CODE>LOCAL_COPY_HEADERS_TO</CODE>.</P>
<P>This is going away because copying headers messes up the error messages, and 
may lead to people editing those headers instead of the correct ones. It also 
makes it easier to do bad layering in the system, which we want to avoid. We 
also aren't doing a C/C++ SDK, so there is no ultimate requirement to copy any 
headers.</P>
<H4>LOCAL_COPY_HEADERS_TO</H4>
<P class=warning>This will be going away.</P>
<P>The directory within "include" to copy the headers listed in 
<CODE>LOCAL_COPY_HEADERS</CODE> to.</P>
<P>This is going away because copying headers messes up the error messages, and 
may lead to people editing those headers instead of the correct ones. It also 
makes it easier to do bad layering in the system, which we want to avoid. We 
also aren't doing a C/C++ SDK, so there is no ultimate requirement to copy any 
headers.</P>
<H4>LOCAL_C_INCLUDES</H4>
<P>Additional directories to instruct the C/C++ compilers to look for header 
files in. These paths are rooted at the top of the tree. Use 
<CODE>LOCAL_PATH</CODE> if you have subdirectories of your own that you want in 
the include paths. For example:</P>
<P><CODE>LOCAL_C_INCLUDES += extlibs/zlib-1.2.3<BR>LOCAL_C_INCLUDES += 
$(LOCAL_PATH)/src </CODE></P>
<P>You should not add subdirectories of include to 
<CODE>LOCAL_C_INCLUDES</CODE>, instead you should reference those files in the 
<CODE>#include</CODE> statement with their subdirectories. For example:</P>
<P><CODE>#include &lt;utils/KeyedVector.h&gt;</CODE><BR>not <CODE><S>#include 
&lt;KeyedVector.h&gt;</S></CODE></P>
<P>There are some components that are doing this wrong, and should be cleaned 
up.</P>
<H4>LOCAL_MODULE_TAGS</H4>
<P>Set <CODE>LOCAL_MODULE_TAGS</CODE> to any number of whitespace-separated 
tags. If the tag list is empty or contains <CODE>droid</CODE>, the module will 
get installed as part of a <CODE>make droid</CODE>. Otherwise, it will only get 
installed by running <CODE>make &lt;your-module&gt;</CODE> or with the 
<CODE>make all</CODE> pseudotarget.</P>
<H4>LOCAL_REQUIRED_MODULES</H4>
<P>Set <CODE>LOCAL_REQUIRED_MODULES</CODE> to any number of whitespace-separated 
module names, like "libblah" or "Email". If this module is installed, all of the 
modules that it requires will be installed as well. This can be used to, e.g., 
ensure that necessary shared libraries or providers are installed when a given 
app is installed. 
<H4>LOCAL_FORCE_STATIC_EXECUTABLE</H4>
<P>If your executable should be linked statically, set 
<CODE>LOCAL_FORCE_STATIC_EXECUTABLE:=true</CODE>. There is a very short list of 
libraries that we have in static form (currently only libc). This is really only 
used for executables in /sbin on the root filesystem.</P>
<H4>LOCAL_GENERATED_SOURCES</H4>
<P>Files that you add to <CODE>LOCAL_GENERATED_SOURCES</CODE> will be 
automatically generated and then linked in when your module is built. See the <A 
href="http://android.git.kernel.org/?p=platform/build.git;a=blob_plain;f=core/build-system.html#custom-tools">Custom 
Tools</A> template makefile for an example.</P>
<H4>LOCAL_JAVA_LIBRARIES</H4>
<P>When linking Java apps and libraries, <CODE>LOCAL_JAVA_LIBRARIES</CODE> 
specifies which sets of java classes to include. Currently there are two of 
these: <CODE>core</CODE> and <CODE>framework</CODE>. In most cases, it will look 
like this:</P>
<P><CODE>LOCAL_JAVA_LIBRARIES := core framework</CODE></P>
<P>Note that setting <CODE>LOCAL_JAVA_LIBRARIES</CODE> is not necessary (and is 
not allowed) when building an APK with "<CODE>include $(BUILD_PACKAGE)</CODE>". 
The appropriate libraries will be included automatically.</P>
<H4>LOCAL_LDFLAGS</H4>
<P>You can pass additional flags to the linker by setting 
<CODE>LOCAL_LDFLAGS</CODE>. Keep in mind that the order of parameters is very 
important to ld, so test whatever you do on all platforms.</P>
<H4>LOCAL_LDLIBS</H4>
<P><CODE>LOCAL_LDLIBS</CODE> allows you to specify additional libraries that are 
not part of the build for your executable or library. Specify the libraries you 
want in -lxxx format; they're passed directly to the link line. However, keep in 
mind that there will be no dependency generated for these libraries. It's most 
useful in simulator builds where you want to use a library preinstalled on the 
host. The linker (ld) is a particularly fussy beast, so it's sometimes necessary 
to pass other flags here if you're doing something sneaky. Some examples:</P>
<P><CODE>LOCAL_LDLIBS += -lcurses -lpthread<BR>LOCAL_LDLIBS += -Wl,-z,origin 
</CODE></P>
<H4>LOCAL_NO_MANIFEST</H4>
<P>If your package doesn't have a manifest (AndroidManifest.xml), then set 
<CODE>LOCAL_NO_MANIFEST:=true</CODE>. The common resources package does 
this.</P>
<H4>LOCAL_PACKAGE_NAME</H4>
<P><CODE>LOCAL_PACKAGE_NAME</CODE> is the name of an app. For example, Dialer, 
Contacts, etc. This will probably change or go away when we switch to an 
ant-based build system for the apps.</P>
<H4>LOCAL_PATH</H4>
<P>The directory your Android.mk file is in. You can set it by putting the 
following as the first line in your Android.mk:</P>
<P><CODE>LOCAL_PATH := $(my-dir)</CODE></P>
<P>The <CODE>my-dir</CODE> macro uses the <CODE><A 
href="http://www.gnu.org/software/make/manual/make.html#MAKEFILE_005fLIST-Variable">MAKEFILE_LIST</A></CODE> 
variable, so you must call it before you include any other makefiles. Also, 
consider that any subdirectories you inlcude might reset LOCAL_PATH, so do your 
own stuff before you include them. This also means that if you try to write 
several <CODE>include</CODE> lines that reference <CODE>LOCAL_PATH</CODE>, it 
won't work, because those included makefiles might reset LOCAL_PATH. 
<H4>LOCAL_POST_PROCESS_COMMAND</H4>
<P>For host executables, you can specify a command to run on the module after 
it's been linked. You might have to go through some contortions to get variables 
right because of early or late variable evaluation:</P>
<P><CODE>module := 
$(HOST_OUT_EXECUTABLES)/$(LOCAL_MODULE)<BR>LOCAL_POST_PROCESS_COMMAND := 
/Developer/Tools/Rez -d __DARWIN__ -t 
APPL\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-d __WXMAC__ -o $(module) 
Carbon.r </CODE></P>
<H4>LOCAL_PREBUILT_EXECUTABLES</H4>
<P>When including $(BUILD_PREBUILT) or $(BUILD_HOST_PREBUILT), set these to 
executables that you want copied. They're located automatically into the right 
bin directory.</P>
<H4>LOCAL_PREBUILT_LIBS</H4>
<P>When including $(BUILD_PREBUILT) or $(BUILD_HOST_PREBUILT), set these to 
libraries that you want copied. They're located automatically into the right lib 
directory.</P>
<H4>LOCAL_SHARED_LIBRARIES</H4>
<P>These are the libraries you directly link against. You don't need to pass 
transitively included libraries. Specify the name without the suffix:</P>
<P><CODE>LOCAL_SHARED_LIBRARIES := \<BR>&nbsp;&nbsp;&nbsp;&nbsp;libutils 
\<BR>&nbsp;&nbsp;&nbsp;&nbsp;libui \<BR>&nbsp;&nbsp;&nbsp;&nbsp;libaudio 
\<BR>&nbsp;&nbsp;&nbsp;&nbsp;libexpat \<BR>&nbsp;&nbsp;&nbsp;&nbsp;libsgl 
</CODE></P>
<H4>LOCAL_SRC_FILES</H4>
<P>The build system looks at <CODE>LOCAL_SRC_FILES</CODE> to know what source 
files to compile -- .cpp .c .y .l .java. For lex and yacc files, it knows how to 
correctly do the intermediate .h and .c/.cpp files automatically. If the files 
are in a subdirectory of the one containing the Android.mk, prefix them with the 
directory name:</P>
<P><CODE>LOCAL_SRC_FILES := \<BR>&nbsp;&nbsp;&nbsp;&nbsp;file1.cpp 
\<BR>&nbsp;&nbsp;&nbsp;&nbsp;dir/file2.cpp </CODE></P>
<H4>LOCAL_STATIC_LIBRARIES</H4>
<P>These are the static libraries that you want to include in your module. 
Mostly, we use shared libraries, but there are a couple of places, like 
executables in sbin and host executables where we use static libraries instead. 
<P><CODE>LOCAL_STATIC_LIBRARIES := \<BR>&nbsp;&nbsp;&nbsp;&nbsp;libutils 
\<BR>&nbsp;&nbsp;&nbsp;&nbsp;libtinyxml </CODE></P>
<H4>LOCAL_MODULE</H4>
<P><CODE>LOCAL_MODULE</CODE> is the name of what's supposed to be generated from 
your Android.mk. For exmample, for libkjs, the <CODE>LOCAL_MODULE</CODE> is 
"libkjs" (the build system adds the appropriate suffix -- .so .dylib .dll). For 
app modules, use <CODE>LOCAL_PACKAGE_NAME</CODE> instead of 
<CODE>LOCAL_MODULE</CODE>. We're planning on switching to ant for the apps, so 
this might become moot.</P>
<H4>LOCAL_MODULE_PATH</H4>
<P>Instructs the build system to put the module somewhere other than what's 
normal for its type. If you override this, make sure you also set 
<CODE>LOCAL_UNSTRIPPED_PATH</CODE> if it's an executable or a shared library so 
the unstripped binary has somewhere to go. An error will occur if you forget 
to.</P>
<P>See <A 
href="http://android.git.kernel.org/?p=platform/build.git;a=blob_plain;f=core/build-system.html#moving-modules">Putting 
modules elsewhere</A> for more.</P>
<H4>LOCAL_UNSTRIPPED_PATH</H4>
<P>Instructs the build system to put the unstripped version of the module 
somewhere other than what's normal for its type. Usually, you override this 
because you overrode <CODE>LOCAL_MODULE_PATH</CODE> for an executable or a 
shared library. If you overrode <CODE>LOCAL_MODULE_PATH</CODE>, but not 
<CODE>LOCAL_UNSTRIPPED_PATH</CODE>, an error will occur.</P>
<P>See <A 
href="http://android.git.kernel.org/?p=platform/build.git;a=blob_plain;f=core/build-system.html#moving-modules">Putting 
modules elsewhere</A> for more.</P>
<H4>LOCAL_WHOLE_STATIC_LIBRARIES</H4>
<P>These are the static libraries that you want to include in your module 
without allowing the linker to remove dead code from them. This is mostly useful 
if you want to add a static library to a shared library and have the static 
library's content exposed from the shared library. 
<P><CODE>LOCAL_WHOLE_STATIC_LIBRARIES := 
\<BR>&nbsp;&nbsp;&nbsp;&nbsp;libsqlite3_android<BR></CODE></P>
<H4>LOCAL_YACCFLAGS</H4>
<P>Any flags to pass to invocations of yacc for your module. A known limitation 
here is that the flags will be the same for all invocations of YACC for your 
module. This can be fixed. If you ever need it to be, just ask.</P>
<P><CODE>LOCAL_YACCFLAGS := -p kjsyy</CODE></P>
<H2>Implementation Details</H2>
<P>You should never have to touch anything in the config directory unless you're 
adding a new platform, new tools, or adding new features to the build system. In 
general, please consult with the build system owner(s) (<A 
href="mailto:android-build-team">android-build-team</A>) before you go mucking 
around in here. That said, here are some notes on what's going on under the 
hood.</P>
<H3>Environment Setup / buildspec.mk Versioning</H3>
<P>In order to make easier for people when the build system changes, when it is 
necessary to make changes to buildspec.mk or to rerun the environment setup 
scripts, they contain a version number in the variable 
BUILD_ENV_SEQUENCE_NUMBER. If this variable does not match what the build system 
expects, it fails printing an error message explaining what happened. If you 
make a change that requires an update, you need to update two places so this 
message will be printed. 
<UL>
  <LI>In config/envsetup.make, increment the CORRECT_BUILD_ENV_SEQUENCE_NUMBER 
  definition. 
  <LI>In buildspec.mk.default, update the BUILD_ENV_SEQUENCE_DUMBER definition 
  to match the one in config/envsetup.make </LI></UL>The scripts automatically get 
the value from the build system, so they will trigger the warning as well. 
<P></P>
<H3>Additional makefile variables</H3>
<P>You probably shouldn't use these variables. Please consult <A 
href="mailto:android-build-team">android-build-team</A> before using them. These 
are mostly there for workarounds for other issues, or things that aren't 
completely done right.</P>
<H4>LOCAL_ADDITIONAL_DEPENDENCIES</H4>
<P>If your module needs to depend on anything else that isn't actually built in 
to it, you can add those make targets to 
<CODE>LOCAL_ADDITIONAL_DEPENDENCIES</CODE>. Usually this is a workaround for 
some other dependency that isn't created automatically.</P>
<H4>LOCAL_BUILT_MODULE</H4>
<P>When a module is built, the module is created in an intermediate directory 
then copied to its final location. LOCAL_BUILT_MODULE is the full path to the 
intermediate file. See LOCAL_INSTALLED_MODULE for the path to the final 
installed location of the module.</P>
<H4>LOCAL_HOST</H4>
<P>Set by the host_xxx.make includes to tell base_rules.make and the other 
includes that we're building for the host. Kenneth did this as part of 
openbinder, and I would like to clean it up so the rules, includes and 
definitions aren't duplicated for host and target.</P>
<H4>LOCAL_INSTALLED_MODULE</H4>
<P>The fully qualified path name of the final location of the module. See 
LOCAL_BUILT_MODULE for the location of the intermediate file that the make rules 
should actually be constructing.</P>
<H4>LOCAL_REPLACE_VARS</H4>
<P>Used in some stuff remaining from the openbinder for building scripts with 
particular values set,</P>
<H4>LOCAL_SCRIPTS</H4>
<P>Used in some stuff remaining from the openbinder build system that we might 
find handy some day.</P>
<H4>LOCAL_MODULE_CLASS</H4>
<P>Which kind of module this is. This variable is used to construct other 
variable names used to locate the modules. See base_rules.make and 
envsetup.make.</P>
<H4>LOCAL_MODULE_NAME</H4>
<P>Set to the leaf name of the LOCAL_BUILT_MODULE. I'm not sure, but it looks 
like it's just used in the WHO_AM_I variable to identify in the pretty printing 
what's being built.</P>
<H4>LOCAL_MODULE_SUFFIX</H4>
<P>The suffix that will be appended to <CODE>LOCAL_MODULE</CODE> to form 
<CODE>LOCAL_MODULE_NAME</CODE>. For example, .so, .a, .dylib.</P>
<H4>LOCAL_STRIP_MODULE</H4>
<P>Calculated in base_rules.make to determine if this module should actually be 
stripped or not, based on whether <CODE>LOCAL_STRIPPABLE_MODULE</CODE> is set, 
and whether the combo is configured to ever strip modules. With Iliyan's 
stripping tool, this might change.</P>
<H4>LOCAL_STRIPPABLE_MODULE</H4>
<P>Set by the include makefiles if that type of module is strippable. 
Executables and shared libraries are.</P>
<H4>LOCAL_SYSTEM_SHARED_LIBRARIES</H4>
<P>Used while building the base libraries: libc, libm, libdl. Usually it should 
be set to "none," as it is in $(CLEAR_VARS). When building these libraries, it's 
set to the ones they link against. For example, libc, libstdc++ and libdl don't 
link against anything, and libm links against libc. Normally, when the value is 
none, these libraries are automatically linked in to executables and libraries, 
so you don't need to specify them manually.</P></BODY></HTML>
