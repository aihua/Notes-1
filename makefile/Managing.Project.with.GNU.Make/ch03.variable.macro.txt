变量的两种定义方式:
    $(var)
    ${var} # 老式makefile

变量风格：
    # 内置变量
    CC = gcc
    MKDIR = mkdir -p

    # 用户变量
    sources = *.c
    objects = $(sources:%.c=%.o)

    # 函数 (减号分开)
    maybe-make-dir = $(if $(wildcard $1),,$(MKDIR) $1)

    # 等号右边的空格自动被删除
    # 但是尾部的空格不会被删除
    LIBRARY = libio.a # $(LIBRARY)="libio.a "


变量类型：
    1. 简单扩展类型 (simply expanded variable)

        #立即展开
        MAKE_DEPS := $(CC) -M

    2. 递归扩展类型 (recursively expanded variable)

        # 使用时展开
        MAKE_DEPS = $(CC) -M

    3. ?=
        在变量不存在的情况下，才进行赋值操作

    4. += 
        为变量追加赋值

        simple += more
        simple := $(simple) more # 等价
        simple = $(simple) more  # error!

    IMMEDIATE: 值不会改变,定义的时候就展开 
    DEFERRED: 值可能会改变,使用的时候被展开 

    # 变量立即展开和延后展开的区别
    objects := main.o
    def = $(objects)
    imd := $(objects)

    $(info $(def)) # main.o
    $(info $(imd)) # main.o
    objects += kdb.o
    $(info $(def)) # main.o kdb.o
    $(info $(imd)) # main.o

    变量定义解析的规则如下：
    IMMEDIATE = DEFERRED
    IMMEDIATE ?= DEFERRED
    IMMEDIATE := IMMEDIATE
    IMMEDIATE += DEFERRED or IMMEDIATE
    define IMMEDIATE
        DEFERRED
    endef

    所有的规则在make执行时，都按照如下的模式展开：
    IMMEDIATE : IMMEDIATE 
        DEFERRED

    目标和依赖中变量，被立即展开。
    命令中的变量, 被延后展开。
    此模板适合所有的规则，包括明确规则、模式规则、后缀规则、静态模式规则。

宏
    define create-jar
        @echo test
        @echo test 2
    endef

GNU的make工作时的执行步骤入下
    第一个阶段
        1、读入所有的Makefile。
            “MAKIFILES”变量指定的
            指示符“include”指定的
            命令行选项“-f(--file)”指定的
        3、初始化文件中的变量。
        4、推导隐晦规则，并分析所有规则。
        5、为所有的目标文件创建依赖关系链。

    第二个阶段
        6、根据依赖关系，决定哪些目标要重新生成。
        7、执行生成命令。

    := 在第一阶段展开
    =, ?= 在第二阶段使用时被展开
    define的名字在第一阶段展开， 内容在第二阶段展开
    目标，依赖在第一阶段展开。命令在第二阶段展开

对于立即展开的变量，需要按照顺序定义
    dir := /usr/bin/
    vim := $(dir)vim
    bash := $(dir)bash

    # 如果dir放到了这里， vim和bash前面就没有目录名字了
    dir := /usr/bin/

    $(info dir, $(dir))
    $(info vim, $(vim))
    $(info bash, $(bash))

目标的专用变量

    # 仅仅在编译gui.o时， CPPFLAGS中增加了DEBUG=true
    gui.o: CPPFLAGS += -DDEBUG=true
    gui.o: gui.cpp gui.h
        $(CC) $(CPPFLAGS) -c $< -o $@

变量的来源

    文件
        include

    命令行
        make CFLAGS="-I include" CPPFLAGS="-DHAVE_FM_RADIO=1"

        命令行定义的变量默认覆盖Makefile中出现的同名变量的定义

        override会使Makefile中定义变量替换命令行中的变量
        override VARIABLE = VALUE 

        #会在命令行变量后, 追加东西
        override CFLAGS += -Wall
            make CFLAGS=-g
            #这时CFLAGS 为-g -Wall

        # make dir=/usr file=emacs browser=firefox

        dir := /usr/bin/
        override editor := vim
        override browser += chromium

        $(info dir, $(dir))         # /usr
        $(info editor, $(editor))   # vim
        $(info browser, $(browser)) # firefox chromium
    
    环境变量
        make启动后，所有环境变量都自动变成了make的变量

        命令行变量 > Makefile变量 > 环境变量

        --environment-overrides (-e) 
            让环境变量覆盖makefile变量


        make递归调用时，环境变量直接传递到下层makefile

        通过export将makefile变量放到环境中
        export BIN := /home/jiangrui/bin
        export                              # 将所有变量放到环境中

        unexport DISPLAY    # 避免变量被导出到下一层makefile中




