
2D + 透视 = 3D

    perspective


状态机模型
    设置了opengl的模式后，这些模式会一直生效，知道再次修改它们
        如当前颜色是一个状态，设置了之后，绘制所有物体都会是有这个颜色

        其他状态如
            当前视图，投影变换，直线何多边形的画点模式，多边形的绘图模式
            光照位置，绘制物体的材料等等

        这些状态类似于Skia中画笔(SkPaint)的状态

渲染管线(pipeline) (FIXME: 没搞懂!!!)
    绝大多数openGL实现都有相似的操作顺序，一系列相关的处理阶段叫做OpenGL渲染管线。
    
    1 求值器
        通过几何图元的顶点计算
            表面法线，纹理坐标，颜色以及空间坐标。

        根据顶点和图元类型生成描述方程？

    2 基于顶点的操作
        就是把顶点变换成图元

        将3D中的图元投影到屏幕上
            如果使用了纹理，则需要生成纹理坐标
            如果开启了光照，就需要综合变换后的顶点，表面法线，光源位置，材料属性
                进行光照变换，产生最终的颜色值
    
        ?!!! 对每个顶点进行操作

    3 图元装配
        主要工作是剪裁

        透视除法
            使远处的物体看起来比近处的小一些

        viewport和深度(z轴)的操作

        最终产生完整的几何图元
            也就是根据相关的颜色，深度进行了变换和剪裁的顶点

        ?!!! 对每个顶点的操作

    通过顶点生成图元中所有的像素点

    4 像素操作
       
    5. 纹理装配
        在几何图元上应用纹理图像

    6. 光栅化 
        将几何数据和像素数据转化为fragment的过程。每个fragment方块对应于帧缓冲区域中的一个像素。

    7. fragment操作

相关库函数
    OpenGL工具函数库(GLU)
        glu开头

    窗口系统函数库
        glX, agl, cgl


    OpenGL实用工具库(GLUT)
        glut开头


OpenGL渲染环境(上下文)
    存储状态信息的数据结构
        纹理， 服务器端的缓存对象，函数入口点, 混合状态, 编译过的渲染对象

基本绘图操作


OpenGL使用三维齐次坐标系
    (x, y, z, w), w默认为1.0
    点的坐标为(x/w, y/w, z/w) w!=0时


OpenGL多边形
    必须是简单多边形
        各条边不能相交
    
    必须是凸多边形

